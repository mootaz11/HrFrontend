/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { months } from './data-models/data-calendar';
import * as i0 from "@angular/core";
var NgxSimpleCalendarService = /** @class */ (function () {
    function NgxSimpleCalendarService() {
        var _this = this;
        this.getDaysInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (month, year) { return new Date(year, month + 1, 0).getDate(); });
        this.getFirstDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (month, year) { return new Date(year, month, 1).getDay(); });
        this.getLastDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (month, year) { return new Date(year, month, _this.getDaysInMonth(month, year)).getDay(); });
        this.getMonthYearText = (/**
         * @param {?} monthNumber
         * @param {?} year
         * @return {?}
         */
        function (monthNumber, year) { return months.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === monthNumber; })).name + " " + year; });
    }
    /**
     * @param {?} month
     * @param {?} year
     * @param {?} events
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.setupCalendar = /**
     * @param {?} month
     * @param {?} year
     * @param {?} events
     * @return {?}
     */
    function (month, year, events) {
        /** @type {?} */
        var firstDayInMonth = this.getFirstDayInMonth(month, year);
        /** @type {?} */
        var lastDayInMonth = this.getLastDayInMonth(month, year);
        /** @type {?} */
        var daysFromLastMonth = this.getDaysFromLastMonth(month, year, firstDayInMonth);
        /** @type {?} */
        var daysFromCurrentMonth = this.getDaysInCurrentMonth(month, year);
        /** @type {?} */
        var daysFromNextMonth = this.getDaysFromNextMonth(month, year, lastDayInMonth);
        /** @type {?} */
        var calendarData = tslib_1.__spread(daysFromLastMonth, daysFromCurrentMonth, daysFromNextMonth);
        this.markCurrentDate(calendarData);
        if (events) {
            this.addEvents(calendarData, events);
        }
        return calendarData;
    };
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} firstDayInMonth
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.getDaysFromLastMonth = /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} firstDayInMonth
     * @return {?}
     */
    function (month, year, firstDayInMonth) {
        /** @type {?} */
        var lastMonth;
        /** @type {?} */
        var activeYear;
        /** @type {?} */
        var lastMonthDays = [];
        if ((month - 1) === -1) {
            lastMonth = 11;
            activeYear = year - 1;
        }
        else {
            lastMonth = month - 1;
            activeYear = year;
        }
        /** @type {?} */
        var daysLastMonth = this.getDaysInMonth(lastMonth, activeYear);
        /** @type {?} */
        var lastFromMonth = (firstDayInMonth === 0) ? 6 : firstDayInMonth - 1;
        for (var i = (daysLastMonth - lastFromMonth) + 1; i <= daysLastMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, lastMonth, i, false));
        }
        return lastMonthDays;
    };
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.getDaysInCurrentMonth = /**
     * @private
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        /** @type {?} */
        var daysInMonth = this.getDaysInMonth(month, year);
        /** @type {?} */
        var currentMonthDays = [];
        for (var i = 1; i <= daysInMonth; i++) {
            currentMonthDays.push(this.generatedayObject(year, month, i));
        }
        return currentMonthDays;
    };
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} lastDayInMonth
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.getDaysFromNextMonth = /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} lastDayInMonth
     * @return {?}
     */
    function (month, year, lastDayInMonth) {
        /** @type {?} */
        var nextMonth;
        /** @type {?} */
        var activeYear;
        /** @type {?} */
        var lastMonthDays = [];
        if ((month + 1) === 12) {
            nextMonth = 0;
            activeYear = year + 1;
        }
        else {
            nextMonth = month + 1;
            activeYear = year;
        }
        /** @type {?} */
        var lastFromMonth = (lastDayInMonth === 0) ? 0 : 7 - lastDayInMonth;
        for (var i = 1; i <= lastFromMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, nextMonth, i, false));
        }
        return lastMonthDays;
    };
    /**
     * @private
     * @param {?} calendarData
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.markCurrentDate = /**
     * @private
     * @param {?} calendarData
     * @return {?}
     */
    function (calendarData) {
        /** @type {?} */
        var now = new Date();
        /** @type {?} */
        var todaysDate = now.getDate();
        /** @type {?} */
        var todaysMonth = now.getMonth();
        /** @type {?} */
        var todaysYear = now.getFullYear();
        calendarData.forEach((/**
         * @param {?} day
         * @return {?}
         */
        function (day) {
            if (day.number === todaysDate && day.month === todaysMonth && day.year === todaysYear) {
                day.today = true;
            }
        }));
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.isWeekend = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var numberDay = date.getDay();
        return numberDay === 0 || numberDay === 6;
    };
    /**
     * @private
     * @param {?} dateTime
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.getDateTimeLastOfDay = /**
     * @private
     * @param {?} dateTime
     * @return {?}
     */
    function (dateTime) {
        /** @type {?} */
        var result = new Date(dateTime.getTime());
        result.setDate(result.getDate() + 1);
        result.setMilliseconds(result.getMilliseconds() - 1);
        return result;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?=} activeMonth
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.generatedayObject = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?=} activeMonth
     * @return {?}
     */
    function (year, month, day, activeMonth) {
        if (activeMonth === void 0) { activeMonth = true; }
        /** @type {?} */
        var startDateTime = new Date(year, month, day);
        /** @type {?} */
        var endDateTime = this.getDateTimeLastOfDay(startDateTime);
        return {
            number: day,
            startDateTime: startDateTime,
            endDateTime: endDateTime,
            month: startDateTime.getMonth(),
            year: startDateTime.getFullYear(),
            weekend: this.isWeekend(startDateTime),
            today: false,
            activeMonth: activeMonth,
            events: []
        };
    };
    /**
     * @private
     * @param {?} calendarData
     * @param {?} events
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.addEvents = /**
     * @private
     * @param {?} calendarData
     * @param {?} events
     * @return {?}
     */
    function (calendarData, events) {
        var _this = this;
        events.forEach((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!event.endDateTime) {
                _this.handleFullDayEvent(calendarData, event);
            }
            else {
                _this.handleEventInterval(calendarData, event);
            }
        }));
    };
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.handleFullDayEvent = /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    function (calendarData, event) {
        try {
            /** @type {?} */
            var dayWithEvent = calendarData.find((/**
             * @param {?} day
             * @return {?}
             */
            function (day) {
                return day.startDateTime.getTime() <= event.startDateTime.getTime() && day.endDateTime.getTime() >= event.startDateTime.getTime();
            }));
            dayWithEvent.events.push(event);
        }
        catch (e) {
            console.log('startDateTime on event is not set');
        }
    };
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    NgxSimpleCalendarService.prototype.handleEventInterval = /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    function (calendarData, event) {
        try {
            /** @type {?} */
            var fromDaysInCalendar = calendarData.filter((/**
             * @param {?} day
             * @return {?}
             */
            function (day) { return day.endDateTime.getTime() >= event.startDateTime.getTime(); }));
            /** @type {?} */
            var intervalDaysInCalendar = fromDaysInCalendar.filter((/**
             * @param {?} day
             * @return {?}
             */
            function (day) {
                /** @type {?} */
                var yesterDayReferentDay = new Date(day.endDateTime.getTime());
                yesterDayReferentDay.setDate(yesterDayReferentDay.getDate() - 1);
                return yesterDayReferentDay.getTime() <= event.endDateTime.getTime();
            }));
            intervalDaysInCalendar.forEach((/**
             * @param {?} day
             * @return {?}
             */
            function (day) {
                day.events.push(event);
            }));
        }
        catch (e) {
            console.log('Error on handling event interval');
        }
    };
    NgxSimpleCalendarService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxSimpleCalendarService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxSimpleCalendarService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxSimpleCalendarService_Factory() { return new NgxSimpleCalendarService(); }, token: NgxSimpleCalendarService, providedIn: "root" });
    return NgxSimpleCalendarService;
}());
export { NgxSimpleCalendarService };
if (false) {
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getDaysInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getFirstDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getLastDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getMonthYearText;
}
//# sourceMappingURL=data:application/json;base64,