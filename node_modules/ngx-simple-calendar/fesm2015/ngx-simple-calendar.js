import { Injectable, ɵɵdefineInjectable, Component, Input, ViewChild, ElementRef, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// ENUMS
/** @enum {number} */
const Month = {
    January: 0,
    February: 1,
    March: 2,
    April: 3,
    May: 4,
    June: 5,
    July: 6,
    August: 7,
    September: 8,
    October: 9,
    November: 10,
    December: 11,
};
Month[Month.January] = 'January';
Month[Month.February] = 'February';
Month[Month.March] = 'March';
Month[Month.April] = 'April';
Month[Month.May] = 'May';
Month[Month.June] = 'June';
Month[Month.July] = 'July';
Month[Month.August] = 'August';
Month[Month.September] = 'September';
Month[Month.October] = 'October';
Month[Month.November] = 'November';
Month[Month.December] = 'December';
/** @enum {number} */
const Day = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
Day[Day.Sunday] = 'Sunday';
Day[Day.Monday] = 'Monday';
Day[Day.Tuesday] = 'Tuesday';
Day[Day.Wednesday] = 'Wednesday';
Day[Day.Thursday] = 'Thursday';
Day[Day.Friday] = 'Friday';
Day[Day.Saturday] = 'Saturday';
/**
 * @record
 */
function CalendarDay() { }
if (false) {
    /** @type {?} */
    CalendarDay.prototype.today;
    /** @type {?} */
    CalendarDay.prototype.number;
    /** @type {?} */
    CalendarDay.prototype.month;
    /** @type {?} */
    CalendarDay.prototype.year;
    /** @type {?} */
    CalendarDay.prototype.startDateTime;
    /** @type {?} */
    CalendarDay.prototype.endDateTime;
    /** @type {?} */
    CalendarDay.prototype.weekend;
    /** @type {?} */
    CalendarDay.prototype.activeMonth;
    /** @type {?} */
    CalendarDay.prototype.events;
}
/**
 * @record
 */
function TopBar() { }
if (false) {
    /** @type {?} */
    TopBar.prototype.year;
    /** @type {?} */
    TopBar.prototype.month;
    /** @type {?} */
    TopBar.prototype.setNextMonth;
    /** @type {?} */
    TopBar.prototype.setPreviousMonth;
}
/**
 * @record
 */
function CalendarEvent() { }
if (false) {
    /** @type {?} */
    CalendarEvent.prototype.startDateTime;
    /** @type {?|undefined} */
    CalendarEvent.prototype.endDateTime;
    /** @type {?|undefined} */
    CalendarEvent.prototype.data;
}
/**
 * @record
 */
function DayI() { }
if (false) {
    /** @type {?} */
    DayI.prototype.id;
    /** @type {?} */
    DayI.prototype.translationKey;
    /** @type {?} */
    DayI.prototype.name;
}
/**
 * @record
 */
function CalendarMonths() { }
if (false) {
    /** @type {?} */
    CalendarMonths.prototype.id;
    /** @type {?} */
    CalendarMonths.prototype.translationKey;
    /** @type {?} */
    CalendarMonths.prototype.name;
}
// BASE DATA
const ɵ0 = Month.January, ɵ1 = Month.February, ɵ2 = Month.March, ɵ3 = Month.April, ɵ4 = Month.May, ɵ5 = Month.June, ɵ6 = Month.July, ɵ7 = Month.August, ɵ8 = Month.September, ɵ9 = Month.October, ɵ10 = Month.November, ɵ11 = Month.December;
/** @type {?} */
const months = [{
        id: ɵ0,
        translationKey: 'calendar.months.january',
        name: 'January'
    }, {
        id: ɵ1,
        translationKey: 'calendar.months.february',
        name: 'February'
    }, {
        id: ɵ2,
        translationKey: 'calendar.months.march',
        name: 'March'
    }, {
        id: ɵ3,
        translationKey: 'calendar.months.april',
        name: 'April'
    }, {
        id: ɵ4,
        translationKey: 'calendar.months.may',
        name: 'May'
    }, {
        id: ɵ5,
        translationKey: 'calendar.months.june',
        name: 'June'
    }, {
        id: ɵ6,
        translationKey: 'calendar.months.july',
        name: 'July'
    }, {
        id: ɵ7,
        translationKey: 'calendar.months.august',
        name: 'August'
    }, {
        id: ɵ8,
        translationKey: 'calendar.months.september',
        name: 'September'
    }, {
        id: ɵ9,
        translationKey: 'calendar.months.october',
        name: 'October'
    }, {
        id: ɵ10,
        translationKey: 'calendar.months.november',
        name: 'November'
    }, {
        id: ɵ11,
        translationKey: 'calendar.months.december',
        name: 'December'
    }];
const ɵ12 = Day.Monday, ɵ13 = Day.Tuesday, ɵ14 = Day.Wednesday, ɵ15 = Day.Thursday, ɵ16 = Day.Friday, ɵ17 = Day.Saturday, ɵ18 = Day.Sunday;
/** @type {?} */
const days = [{
        id: ɵ12,
        translationKey: 'calendar.days.monday',
        name: 'Monday'
    }, {
        id: ɵ13,
        translationKey: 'calendar.days.tuesday',
        name: 'Tuesday'
    }, {
        id: ɵ14,
        translationKey: 'calendar.days.wednesday',
        name: 'Wednesday'
    }, {
        id: ɵ15,
        translationKey: 'calendar.days.thursday',
        name: 'Thursday'
    }, {
        id: ɵ16,
        translationKey: 'calendar.days.friday',
        name: 'Friday'
    }, {
        id: ɵ17,
        translationKey: 'calendar.days.saturday',
        name: 'Saturday'
    }, {
        id: ɵ18,
        translationKey: 'calendar.days.sunday',
        name: 'Sunday'
    }];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSimpleCalendarService {
    constructor() {
        this.getDaysInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month + 1, 0).getDate());
        this.getFirstDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month, 1).getDay());
        this.getLastDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month, this.getDaysInMonth(month, year)).getDay());
        this.getMonthYearText = (/**
         * @param {?} monthNumber
         * @param {?} year
         * @return {?}
         */
        (monthNumber, year) => `${months.find((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.id === monthNumber)).name} ${year}`);
    }
    /**
     * @param {?} month
     * @param {?} year
     * @param {?} events
     * @return {?}
     */
    setupCalendar(month, year, events) {
        /** @type {?} */
        const firstDayInMonth = this.getFirstDayInMonth(month, year);
        /** @type {?} */
        const lastDayInMonth = this.getLastDayInMonth(month, year);
        /** @type {?} */
        const daysFromLastMonth = this.getDaysFromLastMonth(month, year, firstDayInMonth);
        /** @type {?} */
        const daysFromCurrentMonth = this.getDaysInCurrentMonth(month, year);
        /** @type {?} */
        const daysFromNextMonth = this.getDaysFromNextMonth(month, year, lastDayInMonth);
        /** @type {?} */
        const calendarData = [...daysFromLastMonth, ...daysFromCurrentMonth, ...daysFromNextMonth];
        this.markCurrentDate(calendarData);
        if (events) {
            this.addEvents(calendarData, events);
        }
        return calendarData;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} firstDayInMonth
     * @return {?}
     */
    getDaysFromLastMonth(month, year, firstDayInMonth) {
        /** @type {?} */
        let lastMonth;
        /** @type {?} */
        let activeYear;
        /** @type {?} */
        const lastMonthDays = [];
        if ((month - 1) === -1) {
            lastMonth = 11;
            activeYear = year - 1;
        }
        else {
            lastMonth = month - 1;
            activeYear = year;
        }
        /** @type {?} */
        const daysLastMonth = this.getDaysInMonth(lastMonth, activeYear);
        /** @type {?} */
        const lastFromMonth = (firstDayInMonth === 0) ? 6 : firstDayInMonth - 1;
        for (let i = (daysLastMonth - lastFromMonth) + 1; i <= daysLastMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, lastMonth, i, false));
        }
        return lastMonthDays;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    getDaysInCurrentMonth(month, year) {
        /** @type {?} */
        const daysInMonth = this.getDaysInMonth(month, year);
        /** @type {?} */
        const currentMonthDays = [];
        for (let i = 1; i <= daysInMonth; i++) {
            currentMonthDays.push(this.generatedayObject(year, month, i));
        }
        return currentMonthDays;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} lastDayInMonth
     * @return {?}
     */
    getDaysFromNextMonth(month, year, lastDayInMonth) {
        /** @type {?} */
        let nextMonth;
        /** @type {?} */
        let activeYear;
        /** @type {?} */
        const lastMonthDays = [];
        if ((month + 1) === 12) {
            nextMonth = 0;
            activeYear = year + 1;
        }
        else {
            nextMonth = month + 1;
            activeYear = year;
        }
        /** @type {?} */
        const lastFromMonth = (lastDayInMonth === 0) ? 0 : 7 - lastDayInMonth;
        for (let i = 1; i <= lastFromMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, nextMonth, i, false));
        }
        return lastMonthDays;
    }
    /**
     * @private
     * @param {?} calendarData
     * @return {?}
     */
    markCurrentDate(calendarData) {
        /** @type {?} */
        const now = new Date();
        /** @type {?} */
        const todaysDate = now.getDate();
        /** @type {?} */
        const todaysMonth = now.getMonth();
        /** @type {?} */
        const todaysYear = now.getFullYear();
        calendarData.forEach((/**
         * @param {?} day
         * @return {?}
         */
        (day) => {
            if (day.number === todaysDate && day.month === todaysMonth && day.year === todaysYear) {
                day.today = true;
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    isWeekend(date) {
        /** @type {?} */
        const numberDay = date.getDay();
        return numberDay === 0 || numberDay === 6;
    }
    /**
     * @private
     * @param {?} dateTime
     * @return {?}
     */
    getDateTimeLastOfDay(dateTime) {
        /** @type {?} */
        const result = new Date(dateTime.getTime());
        result.setDate(result.getDate() + 1);
        result.setMilliseconds(result.getMilliseconds() - 1);
        return result;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?=} activeMonth
     * @return {?}
     */
    generatedayObject(year, month, day, activeMonth = true) {
        /** @type {?} */
        const startDateTime = new Date(year, month, day);
        /** @type {?} */
        const endDateTime = this.getDateTimeLastOfDay(startDateTime);
        return {
            number: day,
            startDateTime,
            endDateTime,
            month: startDateTime.getMonth(),
            year: startDateTime.getFullYear(),
            weekend: this.isWeekend(startDateTime),
            today: false,
            activeMonth,
            events: []
        };
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} events
     * @return {?}
     */
    addEvents(calendarData, events) {
        events.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!event.endDateTime) {
                this.handleFullDayEvent(calendarData, event);
            }
            else {
                this.handleEventInterval(calendarData, event);
            }
        }));
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    handleFullDayEvent(calendarData, event) {
        try {
            /** @type {?} */
            const dayWithEvent = calendarData.find((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                return day.startDateTime.getTime() <= event.startDateTime.getTime() && day.endDateTime.getTime() >= event.startDateTime.getTime();
            }));
            dayWithEvent.events.push(event);
        }
        catch (e) {
            console.log('startDateTime on event is not set');
        }
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    handleEventInterval(calendarData, event) {
        try {
            /** @type {?} */
            const fromDaysInCalendar = calendarData.filter((/**
             * @param {?} day
             * @return {?}
             */
            (day) => day.endDateTime.getTime() >= event.startDateTime.getTime()));
            /** @type {?} */
            const intervalDaysInCalendar = fromDaysInCalendar.filter((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                /** @type {?} */
                const yesterDayReferentDay = new Date(day.endDateTime.getTime());
                yesterDayReferentDay.setDate(yesterDayReferentDay.getDate() - 1);
                return yesterDayReferentDay.getTime() <= event.endDateTime.getTime();
            }));
            intervalDaysInCalendar.forEach((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                day.events.push(event);
            }));
        }
        catch (e) {
            console.log('Error on handling event interval');
        }
    }
}
NgxSimpleCalendarService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxSimpleCalendarService.ctorParameters = () => [];
/** @nocollapse */ NgxSimpleCalendarService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxSimpleCalendarService_Factory() { return new NgxSimpleCalendarService(); }, token: NgxSimpleCalendarService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getDaysInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getFirstDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getLastDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getMonthYearText;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSimpleCalendarComponent {
    /**
     * @param {?} ngxCalendarSrv
     */
    constructor(ngxCalendarSrv) {
        this.ngxCalendarSrv = ngxCalendarSrv;
        this.options = {};
        this.dayCorrectedHeight = '';
        this.months = months;
        this.days = days;
        this.settings = {
            outline: true,
            evenDayDimensions: false
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set events(value) {
        this.eventsInternal = value;
        this.initializeCalendar();
    }
    /**
     * @return {?}
     */
    get events() {
        return this.eventsInternal;
    }
    /**
     * @return {?}
     */
    get activeMonth() {
        /** @type {?} */
        const currentMonth = months.find((/**
         * @param {?} month
         * @return {?}
         */
        (month) => month.id === this.currentMonth));
        return {
            year: this.currentYear,
            month: currentMonth,
            setNextMonth: this.setNextMonth,
            setPreviousMonth: this.setPreviousMonth
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.settings = Object.assign({}, this.settings, this.options);
        this.initializeCalendar();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => this.dayCorrectedHeight = `${this.dayHolder.nativeElement.clientWidth}px`), 0);
    }
    /**
     * @private
     * @return {?}
     */
    initializeCalendar() {
        this.setupActiveDate();
        this.setupCalendarData();
    }
    /**
     * @private
     * @return {?}
     */
    setupActiveDate() {
        if (!this.currentMonth) {
            /** @type {?} */
            const now = new Date();
            this.currentMonth = now.getMonth();
            this.currentYear = now.getFullYear();
            this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
        }
    }
    /**
     * @private
     * @return {?}
     */
    setupCalendarData() {
        this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
    }
    /**
     * @return {?}
     */
    setPreviousMonth() {
        if ((this.currentMonth - 1) === -1) {
            this.currentMonth = 11;
            this.currentYear = this.currentYear - 1;
        }
        else {
            this.currentMonth = this.currentMonth - 1;
        }
        this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
        this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
    }
    /**
     * @return {?}
     */
    setNextMonth() {
        if ((this.currentMonth + 1) === 12) {
            this.currentMonth = 0;
            this.currentYear = this.currentYear + 1;
        }
        else {
            this.currentMonth = this.currentMonth + 1;
        }
        this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
        this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
    }
}
NgxSimpleCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-simple-calendar',
                template: "<div class=\"ngx-calendar__top-bar\">\r\n  <ng-container *ngIf=\"topBarTemplate\">\r\n    <ng-container *ngTemplateOutlet=\"topBarTemplate; context: activeMonth\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"!topBarTemplate\">\r\n    <div class=\"ngx-calendar__top-bar-icon\" (click)=\"setPreviousMonth()\">\r\n      <\r\n    </div>\r\n    <span class=\"ngx-calendar__title\">{{currentMonthYearText }}</span>\r\n    <div class=\"ngx-calendar__top-bar-icon\" (click)=\"setNextMonth()\">\r\n      >\r\n    </div>\r\n  </ng-container>\r\n\r\n</div>\r\n<div class=\"ngx-calendar__wrapper\">\r\n  <div class=\"ngx-calendar__calendar\">\r\n    <div class=\"ngx-calendar__days-of-week\">\r\n\r\n      <div class=\"ngx-calendar__day-of-week\"\r\n           *ngFor=\"let day of days\">\r\n        <ng-container *ngIf=\"weekDaysTemplate\">\r\n          <ng-container *ngTemplateOutlet=\"weekDaysTemplate; context: day\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!weekDaysTemplate\">\r\n          {{day.name }}\r\n        </ng-container>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"ngx-calendar__days-holder\"\r\n         [style.align-content]=\"settings.evenDayDimensions ? 'baseline': 'initial' \"\r\n         [class.ngx-calendar__days-holder--outline]=\"settings.outline\">\r\n      <div class=\"ngx-calendar__day\"\r\n           #dayHolder\r\n           *ngFor=\"let day of calendarData\"\r\n           [style.height]=\"settings.evenDayDimensions ? dayCorrectedHeight : 'initial'\"\r\n           [class.ngx-calendar__day--outline]=\"settings.outline\"\r\n           [class.today]=\"day.today\"\r\n           [class.not-current]=\"!day.activeMonth\">\r\n        <div [style.display]=\"day.activeMonth ? 'none': 'block'\" class=\"ngx-calendar__day--overlay\"></div>\r\n        <div *ngIf=\"!dayTemplate\" class=\"ngx-calendar__default-day\">\r\n          <div class=\"ngx-calendar__day-number\">{{day.number}}</div>\r\n        </div>\r\n        <ng-container *ngIf=\"dayTemplate\">\r\n          <ng-container *ngTemplateOutlet=\"dayTemplate; context: day\"></ng-container>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [":host{height:100%;width:100%;position:absolute;top:0;bottom:0;right:0;left:0;display:flex;flex-direction:column}.ngx-calendar__top-bar{display:flex;justify-content:center;align-items:center;margin-bottom:1.35rem}.ngx-calendar__top-bar-icon{background-color:#eceff1;font-size:1.1rem;height:1.5rem;width:1.5rem;display:flex;align-items:center;border-radius:50%;justify-content:center;margin:0 1.25rem;color:#6c6d6e;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-calendar__title{color:#455a64;font-size:1.25rem;letter-spacing:.25px;font-weight:500}.ngx-calendar__days-holder,.ngx-calendar__wrapper{flex:1;position:relative}.ngx-calendar__days-holder{display:flex;flex-wrap:wrap}.ngx-calendar__days-holder--outline{border-left:1px solid #cfd8dc;border-top:1px solid #cfd8dc}.ngx-calendar__calendar,.ngx-calendar__days{position:absolute;top:0;bottom:0;right:0;left:0;display:flex}.ngx-calendar__calendar{flex-direction:column}.ngx-calendar__days-of-week{display:flex}.ngx-calendar__day-of-week{flex:1;color:#64818f;font-size:.775rem;padding-top:.35rem;padding-bottom:.35rem}.ngx-calendar__days{background-color:#fff;border:1px solid #cfd8dc;display:flex;flex-wrap:wrap}.ngx-calendar__day{flex:0 1 calc(100%/7 - 1px);border-bottom:1px solid transparent;border-right:1px solid transparent;position:relative}.ngx-calendar__day--overlay{background-color:#f0f4f88a;position:absolute;top:0;bottom:0;right:0;left:0;z-index:2}.ngx-calendar__day--outline{border-bottom:1px solid #cfd8dc;border-right:1px solid #cfd8dc}.ngx-calendar__default-day{position:absolute;top:0;bottom:0;right:0;left:0;padding:.5rem}.ngx-calendar__default-day:nth-child(7n),.ngx-calendar__default-day:nth-child(7n-1){background-color:#feedd9}.ngx-calendar__default-day:nth-child(-n+7){border-top:none}.ngx-calendar__default-day.today{box-shadow:inset 0 0 2px 2px #f57c00}.ngx-calendar__day-number{text-align:right;color:#546e7a;font-size:.85rem}"]
            }] }
];
/** @nocollapse */
NgxSimpleCalendarComponent.ctorParameters = () => [
    { type: NgxSimpleCalendarService }
];
NgxSimpleCalendarComponent.propDecorators = {
    options: [{ type: Input, args: ['options',] }],
    events: [{ type: Input, args: ['events',] }],
    dayHolder: [{ type: ViewChild, args: ['dayHolder', { static: false, read: ElementRef },] }],
    dayTemplate: [{ type: ContentChild, args: ['day', { static: false, read: TemplateRef },] }],
    topBarTemplate: [{ type: ContentChild, args: ['topBar', { static: false, read: TemplateRef },] }],
    weekDaysTemplate: [{ type: ContentChild, args: ['weekDays', { static: false, read: TemplateRef },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxSimpleCalendarComponent.prototype.eventsInternal;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.options;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.dayHolder;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.dayTemplate;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.topBarTemplate;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.weekDaysTemplate;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.dayCorrectedHeight;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.calendarData;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.currentMonthYearText;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.currentMonth;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.currentYear;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.months;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.days;
    /** @type {?} */
    NgxSimpleCalendarComponent.prototype.settings;
    /**
     * @type {?}
     * @private
     */
    NgxSimpleCalendarComponent.prototype.ngxCalendarSrv;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSimpleCalendarModule {
}
NgxSimpleCalendarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgxSimpleCalendarComponent],
                providers: [NgxSimpleCalendarService],
                imports: [CommonModule],
                exports: [NgxSimpleCalendarComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxSimpleCalendarComponent, NgxSimpleCalendarModule, NgxSimpleCalendarService };
//# sourceMappingURL=ngx-simple-calendar.js.map
