/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { months } from './data-models/data-calendar';
import * as i0 from "@angular/core";
export class NgxSimpleCalendarService {
    constructor() {
        this.getDaysInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month + 1, 0).getDate());
        this.getFirstDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month, 1).getDay());
        this.getLastDayInMonth = (/**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        (month, year) => new Date(year, month, this.getDaysInMonth(month, year)).getDay());
        this.getMonthYearText = (/**
         * @param {?} monthNumber
         * @param {?} year
         * @return {?}
         */
        (monthNumber, year) => `${months.find((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.id === monthNumber)).name} ${year}`);
    }
    /**
     * @param {?} month
     * @param {?} year
     * @param {?} events
     * @return {?}
     */
    setupCalendar(month, year, events) {
        /** @type {?} */
        const firstDayInMonth = this.getFirstDayInMonth(month, year);
        /** @type {?} */
        const lastDayInMonth = this.getLastDayInMonth(month, year);
        /** @type {?} */
        const daysFromLastMonth = this.getDaysFromLastMonth(month, year, firstDayInMonth);
        /** @type {?} */
        const daysFromCurrentMonth = this.getDaysInCurrentMonth(month, year);
        /** @type {?} */
        const daysFromNextMonth = this.getDaysFromNextMonth(month, year, lastDayInMonth);
        /** @type {?} */
        const calendarData = [...daysFromLastMonth, ...daysFromCurrentMonth, ...daysFromNextMonth];
        this.markCurrentDate(calendarData);
        if (events) {
            this.addEvents(calendarData, events);
        }
        return calendarData;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} firstDayInMonth
     * @return {?}
     */
    getDaysFromLastMonth(month, year, firstDayInMonth) {
        /** @type {?} */
        let lastMonth;
        /** @type {?} */
        let activeYear;
        /** @type {?} */
        const lastMonthDays = [];
        if ((month - 1) === -1) {
            lastMonth = 11;
            activeYear = year - 1;
        }
        else {
            lastMonth = month - 1;
            activeYear = year;
        }
        /** @type {?} */
        const daysLastMonth = this.getDaysInMonth(lastMonth, activeYear);
        /** @type {?} */
        const lastFromMonth = (firstDayInMonth === 0) ? 6 : firstDayInMonth - 1;
        for (let i = (daysLastMonth - lastFromMonth) + 1; i <= daysLastMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, lastMonth, i, false));
        }
        return lastMonthDays;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    getDaysInCurrentMonth(month, year) {
        /** @type {?} */
        const daysInMonth = this.getDaysInMonth(month, year);
        /** @type {?} */
        const currentMonthDays = [];
        for (let i = 1; i <= daysInMonth; i++) {
            currentMonthDays.push(this.generatedayObject(year, month, i));
        }
        return currentMonthDays;
    }
    /**
     * @private
     * @param {?} month
     * @param {?} year
     * @param {?} lastDayInMonth
     * @return {?}
     */
    getDaysFromNextMonth(month, year, lastDayInMonth) {
        /** @type {?} */
        let nextMonth;
        /** @type {?} */
        let activeYear;
        /** @type {?} */
        const lastMonthDays = [];
        if ((month + 1) === 12) {
            nextMonth = 0;
            activeYear = year + 1;
        }
        else {
            nextMonth = month + 1;
            activeYear = year;
        }
        /** @type {?} */
        const lastFromMonth = (lastDayInMonth === 0) ? 0 : 7 - lastDayInMonth;
        for (let i = 1; i <= lastFromMonth; i++) {
            lastMonthDays.push(this.generatedayObject(activeYear, nextMonth, i, false));
        }
        return lastMonthDays;
    }
    /**
     * @private
     * @param {?} calendarData
     * @return {?}
     */
    markCurrentDate(calendarData) {
        /** @type {?} */
        const now = new Date();
        /** @type {?} */
        const todaysDate = now.getDate();
        /** @type {?} */
        const todaysMonth = now.getMonth();
        /** @type {?} */
        const todaysYear = now.getFullYear();
        calendarData.forEach((/**
         * @param {?} day
         * @return {?}
         */
        (day) => {
            if (day.number === todaysDate && day.month === todaysMonth && day.year === todaysYear) {
                day.today = true;
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    isWeekend(date) {
        /** @type {?} */
        const numberDay = date.getDay();
        return numberDay === 0 || numberDay === 6;
    }
    /**
     * @private
     * @param {?} dateTime
     * @return {?}
     */
    getDateTimeLastOfDay(dateTime) {
        /** @type {?} */
        const result = new Date(dateTime.getTime());
        result.setDate(result.getDate() + 1);
        result.setMilliseconds(result.getMilliseconds() - 1);
        return result;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @param {?=} activeMonth
     * @return {?}
     */
    generatedayObject(year, month, day, activeMonth = true) {
        /** @type {?} */
        const startDateTime = new Date(year, month, day);
        /** @type {?} */
        const endDateTime = this.getDateTimeLastOfDay(startDateTime);
        return {
            number: day,
            startDateTime,
            endDateTime,
            month: startDateTime.getMonth(),
            year: startDateTime.getFullYear(),
            weekend: this.isWeekend(startDateTime),
            today: false,
            activeMonth,
            events: []
        };
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} events
     * @return {?}
     */
    addEvents(calendarData, events) {
        events.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!event.endDateTime) {
                this.handleFullDayEvent(calendarData, event);
            }
            else {
                this.handleEventInterval(calendarData, event);
            }
        }));
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    handleFullDayEvent(calendarData, event) {
        try {
            /** @type {?} */
            const dayWithEvent = calendarData.find((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                return day.startDateTime.getTime() <= event.startDateTime.getTime() && day.endDateTime.getTime() >= event.startDateTime.getTime();
            }));
            dayWithEvent.events.push(event);
        }
        catch (e) {
            console.log('startDateTime on event is not set');
        }
    }
    /**
     * @private
     * @param {?} calendarData
     * @param {?} event
     * @return {?}
     */
    handleEventInterval(calendarData, event) {
        try {
            /** @type {?} */
            const fromDaysInCalendar = calendarData.filter((/**
             * @param {?} day
             * @return {?}
             */
            (day) => day.endDateTime.getTime() >= event.startDateTime.getTime()));
            /** @type {?} */
            const intervalDaysInCalendar = fromDaysInCalendar.filter((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                /** @type {?} */
                const yesterDayReferentDay = new Date(day.endDateTime.getTime());
                yesterDayReferentDay.setDate(yesterDayReferentDay.getDate() - 1);
                return yesterDayReferentDay.getTime() <= event.endDateTime.getTime();
            }));
            intervalDaysInCalendar.forEach((/**
             * @param {?} day
             * @return {?}
             */
            (day) => {
                day.events.push(event);
            }));
        }
        catch (e) {
            console.log('Error on handling event interval');
        }
    }
}
NgxSimpleCalendarService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxSimpleCalendarService.ctorParameters = () => [];
/** @nocollapse */ NgxSimpleCalendarService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxSimpleCalendarService_Factory() { return new NgxSimpleCalendarService(); }, token: NgxSimpleCalendarService, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getDaysInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getFirstDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getLastDayInMonth;
    /** @type {?} */
    NgxSimpleCalendarService.prototype.getMonthYearText;
}
//# sourceMappingURL=data:application/json;base64,