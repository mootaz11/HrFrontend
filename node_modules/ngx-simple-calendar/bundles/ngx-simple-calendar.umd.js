(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-simple-calendar', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-simple-calendar'] = {}, global.ng.core, global.ng.common));
}(this, function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // ENUMS
    /** @enum {number} */
    var Month = {
        January: 0,
        February: 1,
        March: 2,
        April: 3,
        May: 4,
        June: 5,
        July: 6,
        August: 7,
        September: 8,
        October: 9,
        November: 10,
        December: 11,
    };
    Month[Month.January] = 'January';
    Month[Month.February] = 'February';
    Month[Month.March] = 'March';
    Month[Month.April] = 'April';
    Month[Month.May] = 'May';
    Month[Month.June] = 'June';
    Month[Month.July] = 'July';
    Month[Month.August] = 'August';
    Month[Month.September] = 'September';
    Month[Month.October] = 'October';
    Month[Month.November] = 'November';
    Month[Month.December] = 'December';
    /** @enum {number} */
    var Day = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6,
    };
    Day[Day.Sunday] = 'Sunday';
    Day[Day.Monday] = 'Monday';
    Day[Day.Tuesday] = 'Tuesday';
    Day[Day.Wednesday] = 'Wednesday';
    Day[Day.Thursday] = 'Thursday';
    Day[Day.Friday] = 'Friday';
    Day[Day.Saturday] = 'Saturday';
    /**
     * @record
     */
    function CalendarDay() { }
    if (false) {
        /** @type {?} */
        CalendarDay.prototype.today;
        /** @type {?} */
        CalendarDay.prototype.number;
        /** @type {?} */
        CalendarDay.prototype.month;
        /** @type {?} */
        CalendarDay.prototype.year;
        /** @type {?} */
        CalendarDay.prototype.startDateTime;
        /** @type {?} */
        CalendarDay.prototype.endDateTime;
        /** @type {?} */
        CalendarDay.prototype.weekend;
        /** @type {?} */
        CalendarDay.prototype.activeMonth;
        /** @type {?} */
        CalendarDay.prototype.events;
    }
    /**
     * @record
     */
    function TopBar() { }
    if (false) {
        /** @type {?} */
        TopBar.prototype.year;
        /** @type {?} */
        TopBar.prototype.month;
        /** @type {?} */
        TopBar.prototype.setNextMonth;
        /** @type {?} */
        TopBar.prototype.setPreviousMonth;
    }
    /**
     * @record
     */
    function CalendarEvent() { }
    if (false) {
        /** @type {?} */
        CalendarEvent.prototype.startDateTime;
        /** @type {?|undefined} */
        CalendarEvent.prototype.endDateTime;
        /** @type {?|undefined} */
        CalendarEvent.prototype.data;
    }
    /**
     * @record
     */
    function DayI() { }
    if (false) {
        /** @type {?} */
        DayI.prototype.id;
        /** @type {?} */
        DayI.prototype.translationKey;
        /** @type {?} */
        DayI.prototype.name;
    }
    /**
     * @record
     */
    function CalendarMonths() { }
    if (false) {
        /** @type {?} */
        CalendarMonths.prototype.id;
        /** @type {?} */
        CalendarMonths.prototype.translationKey;
        /** @type {?} */
        CalendarMonths.prototype.name;
    }
    // BASE DATA
    var ɵ0 = Month.January, ɵ1 = Month.February, ɵ2 = Month.March, ɵ3 = Month.April, ɵ4 = Month.May, ɵ5 = Month.June, ɵ6 = Month.July, ɵ7 = Month.August, ɵ8 = Month.September, ɵ9 = Month.October, ɵ10 = Month.November, ɵ11 = Month.December;
    /** @type {?} */
    var months = [{
            id: ɵ0,
            translationKey: 'calendar.months.january',
            name: 'January'
        }, {
            id: ɵ1,
            translationKey: 'calendar.months.february',
            name: 'February'
        }, {
            id: ɵ2,
            translationKey: 'calendar.months.march',
            name: 'March'
        }, {
            id: ɵ3,
            translationKey: 'calendar.months.april',
            name: 'April'
        }, {
            id: ɵ4,
            translationKey: 'calendar.months.may',
            name: 'May'
        }, {
            id: ɵ5,
            translationKey: 'calendar.months.june',
            name: 'June'
        }, {
            id: ɵ6,
            translationKey: 'calendar.months.july',
            name: 'July'
        }, {
            id: ɵ7,
            translationKey: 'calendar.months.august',
            name: 'August'
        }, {
            id: ɵ8,
            translationKey: 'calendar.months.september',
            name: 'September'
        }, {
            id: ɵ9,
            translationKey: 'calendar.months.october',
            name: 'October'
        }, {
            id: ɵ10,
            translationKey: 'calendar.months.november',
            name: 'November'
        }, {
            id: ɵ11,
            translationKey: 'calendar.months.december',
            name: 'December'
        }];
    var ɵ12 = Day.Monday, ɵ13 = Day.Tuesday, ɵ14 = Day.Wednesday, ɵ15 = Day.Thursday, ɵ16 = Day.Friday, ɵ17 = Day.Saturday, ɵ18 = Day.Sunday;
    /** @type {?} */
    var days = [{
            id: ɵ12,
            translationKey: 'calendar.days.monday',
            name: 'Monday'
        }, {
            id: ɵ13,
            translationKey: 'calendar.days.tuesday',
            name: 'Tuesday'
        }, {
            id: ɵ14,
            translationKey: 'calendar.days.wednesday',
            name: 'Wednesday'
        }, {
            id: ɵ15,
            translationKey: 'calendar.days.thursday',
            name: 'Thursday'
        }, {
            id: ɵ16,
            translationKey: 'calendar.days.friday',
            name: 'Friday'
        }, {
            id: ɵ17,
            translationKey: 'calendar.days.saturday',
            name: 'Saturday'
        }, {
            id: ɵ18,
            translationKey: 'calendar.days.sunday',
            name: 'Sunday'
        }];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSimpleCalendarService = /** @class */ (function () {
        function NgxSimpleCalendarService() {
            var _this = this;
            this.getDaysInMonth = (/**
             * @param {?} month
             * @param {?} year
             * @return {?}
             */
            function (month, year) { return new Date(year, month + 1, 0).getDate(); });
            this.getFirstDayInMonth = (/**
             * @param {?} month
             * @param {?} year
             * @return {?}
             */
            function (month, year) { return new Date(year, month, 1).getDay(); });
            this.getLastDayInMonth = (/**
             * @param {?} month
             * @param {?} year
             * @return {?}
             */
            function (month, year) { return new Date(year, month, _this.getDaysInMonth(month, year)).getDay(); });
            this.getMonthYearText = (/**
             * @param {?} monthNumber
             * @param {?} year
             * @return {?}
             */
            function (monthNumber, year) { return months.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.id === monthNumber; })).name + " " + year; });
        }
        /**
         * @param {?} month
         * @param {?} year
         * @param {?} events
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.setupCalendar = /**
         * @param {?} month
         * @param {?} year
         * @param {?} events
         * @return {?}
         */
        function (month, year, events) {
            /** @type {?} */
            var firstDayInMonth = this.getFirstDayInMonth(month, year);
            /** @type {?} */
            var lastDayInMonth = this.getLastDayInMonth(month, year);
            /** @type {?} */
            var daysFromLastMonth = this.getDaysFromLastMonth(month, year, firstDayInMonth);
            /** @type {?} */
            var daysFromCurrentMonth = this.getDaysInCurrentMonth(month, year);
            /** @type {?} */
            var daysFromNextMonth = this.getDaysFromNextMonth(month, year, lastDayInMonth);
            /** @type {?} */
            var calendarData = __spread(daysFromLastMonth, daysFromCurrentMonth, daysFromNextMonth);
            this.markCurrentDate(calendarData);
            if (events) {
                this.addEvents(calendarData, events);
            }
            return calendarData;
        };
        /**
         * @private
         * @param {?} month
         * @param {?} year
         * @param {?} firstDayInMonth
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.getDaysFromLastMonth = /**
         * @private
         * @param {?} month
         * @param {?} year
         * @param {?} firstDayInMonth
         * @return {?}
         */
        function (month, year, firstDayInMonth) {
            /** @type {?} */
            var lastMonth;
            /** @type {?} */
            var activeYear;
            /** @type {?} */
            var lastMonthDays = [];
            if ((month - 1) === -1) {
                lastMonth = 11;
                activeYear = year - 1;
            }
            else {
                lastMonth = month - 1;
                activeYear = year;
            }
            /** @type {?} */
            var daysLastMonth = this.getDaysInMonth(lastMonth, activeYear);
            /** @type {?} */
            var lastFromMonth = (firstDayInMonth === 0) ? 6 : firstDayInMonth - 1;
            for (var i = (daysLastMonth - lastFromMonth) + 1; i <= daysLastMonth; i++) {
                lastMonthDays.push(this.generatedayObject(activeYear, lastMonth, i, false));
            }
            return lastMonthDays;
        };
        /**
         * @private
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.getDaysInCurrentMonth = /**
         * @private
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (month, year) {
            /** @type {?} */
            var daysInMonth = this.getDaysInMonth(month, year);
            /** @type {?} */
            var currentMonthDays = [];
            for (var i = 1; i <= daysInMonth; i++) {
                currentMonthDays.push(this.generatedayObject(year, month, i));
            }
            return currentMonthDays;
        };
        /**
         * @private
         * @param {?} month
         * @param {?} year
         * @param {?} lastDayInMonth
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.getDaysFromNextMonth = /**
         * @private
         * @param {?} month
         * @param {?} year
         * @param {?} lastDayInMonth
         * @return {?}
         */
        function (month, year, lastDayInMonth) {
            /** @type {?} */
            var nextMonth;
            /** @type {?} */
            var activeYear;
            /** @type {?} */
            var lastMonthDays = [];
            if ((month + 1) === 12) {
                nextMonth = 0;
                activeYear = year + 1;
            }
            else {
                nextMonth = month + 1;
                activeYear = year;
            }
            /** @type {?} */
            var lastFromMonth = (lastDayInMonth === 0) ? 0 : 7 - lastDayInMonth;
            for (var i = 1; i <= lastFromMonth; i++) {
                lastMonthDays.push(this.generatedayObject(activeYear, nextMonth, i, false));
            }
            return lastMonthDays;
        };
        /**
         * @private
         * @param {?} calendarData
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.markCurrentDate = /**
         * @private
         * @param {?} calendarData
         * @return {?}
         */
        function (calendarData) {
            /** @type {?} */
            var now = new Date();
            /** @type {?} */
            var todaysDate = now.getDate();
            /** @type {?} */
            var todaysMonth = now.getMonth();
            /** @type {?} */
            var todaysYear = now.getFullYear();
            calendarData.forEach((/**
             * @param {?} day
             * @return {?}
             */
            function (day) {
                if (day.number === todaysDate && day.month === todaysMonth && day.year === todaysYear) {
                    day.today = true;
                }
            }));
        };
        /**
         * @private
         * @param {?} date
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.isWeekend = /**
         * @private
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var numberDay = date.getDay();
            return numberDay === 0 || numberDay === 6;
        };
        /**
         * @private
         * @param {?} dateTime
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.getDateTimeLastOfDay = /**
         * @private
         * @param {?} dateTime
         * @return {?}
         */
        function (dateTime) {
            /** @type {?} */
            var result = new Date(dateTime.getTime());
            result.setDate(result.getDate() + 1);
            result.setMilliseconds(result.getMilliseconds() - 1);
            return result;
        };
        /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @param {?=} activeMonth
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.generatedayObject = /**
         * @param {?} year
         * @param {?} month
         * @param {?} day
         * @param {?=} activeMonth
         * @return {?}
         */
        function (year, month, day, activeMonth) {
            if (activeMonth === void 0) { activeMonth = true; }
            /** @type {?} */
            var startDateTime = new Date(year, month, day);
            /** @type {?} */
            var endDateTime = this.getDateTimeLastOfDay(startDateTime);
            return {
                number: day,
                startDateTime: startDateTime,
                endDateTime: endDateTime,
                month: startDateTime.getMonth(),
                year: startDateTime.getFullYear(),
                weekend: this.isWeekend(startDateTime),
                today: false,
                activeMonth: activeMonth,
                events: []
            };
        };
        /**
         * @private
         * @param {?} calendarData
         * @param {?} events
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.addEvents = /**
         * @private
         * @param {?} calendarData
         * @param {?} events
         * @return {?}
         */
        function (calendarData, events) {
            var _this = this;
            events.forEach((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!event.endDateTime) {
                    _this.handleFullDayEvent(calendarData, event);
                }
                else {
                    _this.handleEventInterval(calendarData, event);
                }
            }));
        };
        /**
         * @private
         * @param {?} calendarData
         * @param {?} event
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.handleFullDayEvent = /**
         * @private
         * @param {?} calendarData
         * @param {?} event
         * @return {?}
         */
        function (calendarData, event) {
            try {
                /** @type {?} */
                var dayWithEvent = calendarData.find((/**
                 * @param {?} day
                 * @return {?}
                 */
                function (day) {
                    return day.startDateTime.getTime() <= event.startDateTime.getTime() && day.endDateTime.getTime() >= event.startDateTime.getTime();
                }));
                dayWithEvent.events.push(event);
            }
            catch (e) {
                console.log('startDateTime on event is not set');
            }
        };
        /**
         * @private
         * @param {?} calendarData
         * @param {?} event
         * @return {?}
         */
        NgxSimpleCalendarService.prototype.handleEventInterval = /**
         * @private
         * @param {?} calendarData
         * @param {?} event
         * @return {?}
         */
        function (calendarData, event) {
            try {
                /** @type {?} */
                var fromDaysInCalendar = calendarData.filter((/**
                 * @param {?} day
                 * @return {?}
                 */
                function (day) { return day.endDateTime.getTime() >= event.startDateTime.getTime(); }));
                /** @type {?} */
                var intervalDaysInCalendar = fromDaysInCalendar.filter((/**
                 * @param {?} day
                 * @return {?}
                 */
                function (day) {
                    /** @type {?} */
                    var yesterDayReferentDay = new Date(day.endDateTime.getTime());
                    yesterDayReferentDay.setDate(yesterDayReferentDay.getDate() - 1);
                    return yesterDayReferentDay.getTime() <= event.endDateTime.getTime();
                }));
                intervalDaysInCalendar.forEach((/**
                 * @param {?} day
                 * @return {?}
                 */
                function (day) {
                    day.events.push(event);
                }));
            }
            catch (e) {
                console.log('Error on handling event interval');
            }
        };
        NgxSimpleCalendarService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgxSimpleCalendarService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxSimpleCalendarService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgxSimpleCalendarService_Factory() { return new NgxSimpleCalendarService(); }, token: NgxSimpleCalendarService, providedIn: "root" });
        return NgxSimpleCalendarService;
    }());
    if (false) {
        /** @type {?} */
        NgxSimpleCalendarService.prototype.getDaysInMonth;
        /** @type {?} */
        NgxSimpleCalendarService.prototype.getFirstDayInMonth;
        /** @type {?} */
        NgxSimpleCalendarService.prototype.getLastDayInMonth;
        /** @type {?} */
        NgxSimpleCalendarService.prototype.getMonthYearText;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSimpleCalendarComponent = /** @class */ (function () {
        function NgxSimpleCalendarComponent(ngxCalendarSrv) {
            this.ngxCalendarSrv = ngxCalendarSrv;
            this.options = {};
            this.dayCorrectedHeight = '';
            this.months = months;
            this.days = days;
            this.settings = {
                outline: true,
                evenDayDimensions: false
            };
        }
        Object.defineProperty(NgxSimpleCalendarComponent.prototype, "events", {
            get: /**
             * @return {?}
             */
            function () {
                return this.eventsInternal;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.eventsInternal = value;
                this.initializeCalendar();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxSimpleCalendarComponent.prototype, "activeMonth", {
            get: /**
             * @return {?}
             */
            function () {
                var _this = this;
                /** @type {?} */
                var currentMonth = months.find((/**
                 * @param {?} month
                 * @return {?}
                 */
                function (month) { return month.id === _this.currentMonth; }));
                return {
                    year: this.currentYear,
                    month: currentMonth,
                    setNextMonth: this.setNextMonth,
                    setPreviousMonth: this.setPreviousMonth
                };
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.settings = __assign({}, this.settings, this.options);
            this.initializeCalendar();
        };
        /**
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.dayCorrectedHeight = _this.dayHolder.nativeElement.clientWidth + "px"; }), 0);
        };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.initializeCalendar = /**
         * @private
         * @return {?}
         */
        function () {
            this.setupActiveDate();
            this.setupCalendarData();
        };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.setupActiveDate = /**
         * @private
         * @return {?}
         */
        function () {
            if (!this.currentMonth) {
                /** @type {?} */
                var now = new Date();
                this.currentMonth = now.getMonth();
                this.currentYear = now.getFullYear();
                this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
            }
        };
        /**
         * @private
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.setupCalendarData = /**
         * @private
         * @return {?}
         */
        function () {
            this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
        };
        /**
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.setPreviousMonth = /**
         * @return {?}
         */
        function () {
            if ((this.currentMonth - 1) === -1) {
                this.currentMonth = 11;
                this.currentYear = this.currentYear - 1;
            }
            else {
                this.currentMonth = this.currentMonth - 1;
            }
            this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
            this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
        };
        /**
         * @return {?}
         */
        NgxSimpleCalendarComponent.prototype.setNextMonth = /**
         * @return {?}
         */
        function () {
            if ((this.currentMonth + 1) === 12) {
                this.currentMonth = 0;
                this.currentYear = this.currentYear + 1;
            }
            else {
                this.currentMonth = this.currentMonth + 1;
            }
            this.calendarData = this.ngxCalendarSrv.setupCalendar(this.currentMonth, this.currentYear, this.events);
            this.currentMonthYearText = this.ngxCalendarSrv.getMonthYearText(this.currentMonth, this.currentYear);
        };
        NgxSimpleCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-simple-calendar',
                        template: "<div class=\"ngx-calendar__top-bar\">\r\n  <ng-container *ngIf=\"topBarTemplate\">\r\n    <ng-container *ngTemplateOutlet=\"topBarTemplate; context: activeMonth\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"!topBarTemplate\">\r\n    <div class=\"ngx-calendar__top-bar-icon\" (click)=\"setPreviousMonth()\">\r\n      <\r\n    </div>\r\n    <span class=\"ngx-calendar__title\">{{currentMonthYearText }}</span>\r\n    <div class=\"ngx-calendar__top-bar-icon\" (click)=\"setNextMonth()\">\r\n      >\r\n    </div>\r\n  </ng-container>\r\n\r\n</div>\r\n<div class=\"ngx-calendar__wrapper\">\r\n  <div class=\"ngx-calendar__calendar\">\r\n    <div class=\"ngx-calendar__days-of-week\">\r\n\r\n      <div class=\"ngx-calendar__day-of-week\"\r\n           *ngFor=\"let day of days\">\r\n        <ng-container *ngIf=\"weekDaysTemplate\">\r\n          <ng-container *ngTemplateOutlet=\"weekDaysTemplate; context: day\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!weekDaysTemplate\">\r\n          {{day.name }}\r\n        </ng-container>\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"ngx-calendar__days-holder\"\r\n         [style.align-content]=\"settings.evenDayDimensions ? 'baseline': 'initial' \"\r\n         [class.ngx-calendar__days-holder--outline]=\"settings.outline\">\r\n      <div class=\"ngx-calendar__day\"\r\n           #dayHolder\r\n           *ngFor=\"let day of calendarData\"\r\n           [style.height]=\"settings.evenDayDimensions ? dayCorrectedHeight : 'initial'\"\r\n           [class.ngx-calendar__day--outline]=\"settings.outline\"\r\n           [class.today]=\"day.today\"\r\n           [class.not-current]=\"!day.activeMonth\">\r\n        <div [style.display]=\"day.activeMonth ? 'none': 'block'\" class=\"ngx-calendar__day--overlay\"></div>\r\n        <div *ngIf=\"!dayTemplate\" class=\"ngx-calendar__default-day\">\r\n          <div class=\"ngx-calendar__day-number\">{{day.number}}</div>\r\n        </div>\r\n        <ng-container *ngIf=\"dayTemplate\">\r\n          <ng-container *ngTemplateOutlet=\"dayTemplate; context: day\"></ng-container>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [":host{height:100%;width:100%;position:absolute;top:0;bottom:0;right:0;left:0;display:flex;flex-direction:column}.ngx-calendar__top-bar{display:flex;justify-content:center;align-items:center;margin-bottom:1.35rem}.ngx-calendar__top-bar-icon{background-color:#eceff1;font-size:1.1rem;height:1.5rem;width:1.5rem;display:flex;align-items:center;border-radius:50%;justify-content:center;margin:0 1.25rem;color:#6c6d6e;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-calendar__title{color:#455a64;font-size:1.25rem;letter-spacing:.25px;font-weight:500}.ngx-calendar__days-holder,.ngx-calendar__wrapper{flex:1;position:relative}.ngx-calendar__days-holder{display:flex;flex-wrap:wrap}.ngx-calendar__days-holder--outline{border-left:1px solid #cfd8dc;border-top:1px solid #cfd8dc}.ngx-calendar__calendar,.ngx-calendar__days{position:absolute;top:0;bottom:0;right:0;left:0;display:flex}.ngx-calendar__calendar{flex-direction:column}.ngx-calendar__days-of-week{display:flex}.ngx-calendar__day-of-week{flex:1;color:#64818f;font-size:.775rem;padding-top:.35rem;padding-bottom:.35rem}.ngx-calendar__days{background-color:#fff;border:1px solid #cfd8dc;display:flex;flex-wrap:wrap}.ngx-calendar__day{flex:0 1 calc(100%/7 - 1px);border-bottom:1px solid transparent;border-right:1px solid transparent;position:relative}.ngx-calendar__day--overlay{background-color:#f0f4f88a;position:absolute;top:0;bottom:0;right:0;left:0;z-index:2}.ngx-calendar__day--outline{border-bottom:1px solid #cfd8dc;border-right:1px solid #cfd8dc}.ngx-calendar__default-day{position:absolute;top:0;bottom:0;right:0;left:0;padding:.5rem}.ngx-calendar__default-day:nth-child(7n),.ngx-calendar__default-day:nth-child(7n-1){background-color:#feedd9}.ngx-calendar__default-day:nth-child(-n+7){border-top:none}.ngx-calendar__default-day.today{box-shadow:inset 0 0 2px 2px #f57c00}.ngx-calendar__day-number{text-align:right;color:#546e7a;font-size:.85rem}"]
                    }] }
        ];
        /** @nocollapse */
        NgxSimpleCalendarComponent.ctorParameters = function () { return [
            { type: NgxSimpleCalendarService }
        ]; };
        NgxSimpleCalendarComponent.propDecorators = {
            options: [{ type: core.Input, args: ['options',] }],
            events: [{ type: core.Input, args: ['events',] }],
            dayHolder: [{ type: core.ViewChild, args: ['dayHolder', { static: false, read: core.ElementRef },] }],
            dayTemplate: [{ type: core.ContentChild, args: ['day', { static: false, read: core.TemplateRef },] }],
            topBarTemplate: [{ type: core.ContentChild, args: ['topBar', { static: false, read: core.TemplateRef },] }],
            weekDaysTemplate: [{ type: core.ContentChild, args: ['weekDays', { static: false, read: core.TemplateRef },] }]
        };
        return NgxSimpleCalendarComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxSimpleCalendarComponent.prototype.eventsInternal;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.options;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.dayHolder;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.dayTemplate;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.topBarTemplate;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.weekDaysTemplate;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.dayCorrectedHeight;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.calendarData;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.currentMonthYearText;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.currentMonth;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.currentYear;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.months;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.days;
        /** @type {?} */
        NgxSimpleCalendarComponent.prototype.settings;
        /**
         * @type {?}
         * @private
         */
        NgxSimpleCalendarComponent.prototype.ngxCalendarSrv;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxSimpleCalendarModule = /** @class */ (function () {
        function NgxSimpleCalendarModule() {
        }
        NgxSimpleCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxSimpleCalendarComponent],
                        providers: [NgxSimpleCalendarService],
                        imports: [common.CommonModule],
                        exports: [NgxSimpleCalendarComponent]
                    },] }
        ];
        return NgxSimpleCalendarModule;
    }());

    exports.NgxSimpleCalendarComponent = NgxSimpleCalendarComponent;
    exports.NgxSimpleCalendarModule = NgxSimpleCalendarModule;
    exports.NgxSimpleCalendarService = NgxSimpleCalendarService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-simple-calendar.umd.js.map
