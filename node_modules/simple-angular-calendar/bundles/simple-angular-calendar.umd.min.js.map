{"version":3,"sources":["ng://simple-angular-calendar/lib/models/day-names.ts","ng://simple-angular-calendar/lib/models/day-of-week.ts","ng://simple-angular-calendar/lib/models/dates/date-math.ts","ng://simple-angular-calendar/lib/models/views/moth-view.ts","ng://simple-angular-calendar/lib/directives/day-template.directive.ts","ng://simple-angular-calendar/lib/directives/day-of-week-caption-template.directive.ts","ng://simple-angular-calendar/lib/directives/month-caption-template.directive.ts","ng://simple-angular-calendar/lib/models/formatters/day-of-week-caption-formatter.ts","ng://simple-angular-calendar/lib/components/month-calendar/month-calendar.component.ts","ng://simple-angular-calendar/lib/models/day-info.ts","ng://simple-angular-calendar/lib/month-calendar.module.ts"],"names":["DAY_NAMES","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","DateMath","addDays","date","days","daysAdded","Date","valueOf","setDate","getDate","substractDays","addMonths","months","monthsAdded","setMonth","getMonth","substractMonths","monthsSubstracted","getFirstDayOfMonth","firstDay","setFullYear","getFullYear","getLastDayOfMonth","lastDay","MonthView","this","prototype","createView","completeHoles","weekStart","DayOfWeek","currentMonthGrid","createGrid","lastMonth","lastDayOfLastMonth","daysToPickFromLastMonth","getDay","i","currentDayOfMonth","currentDate","isToday","isSelected","day","fillingDays","week","WEEKS_PER_MONTH","dayOfWeek","DAYS_PER_WEEK","fillingDates","grid","initGrid","firstDayOfWeek","today","todaySameYear","todaySameMonth","todaySameDay","defaultEmpty","undefined","Array","fill","DayTemplateDirective","Directive","args","selector","DayOfWeekCaptionTemplateDirective","MonthCaptionTemplateDirective","defaultDayOfWeekCaptionFormatterFactory","reorderDays","dayNames","dayCount","length","dayIndex","reordered","newPosition","map","dayName","formatDayName","substr","toUpperCase","toLowerCase","MONTH_CALENDAR_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MonthCalendarComponent","multi","EventEmitter","mode","defaultFirstDayOfWeek","toDateString","toString","Object","defineProperty","_value","writeValue","_grow","_firstDayOfWeek","defaultDayOfWeekCaptionFormatter","refresh","_dayFormatter","formatter","_dayOfWeekCaptionFormatter","_monthCaptionFormatter","ngOnInit","onChange","registerOnChange","fn","registerOnTouched","onTouched","setDisabledState","isDisabled","disabled","refreshMonthCaption","value","refreshDayOfWeekCaptions","refreshView","monthCaptionFormatter","monthCaption","defaultMonthCaptionFormatter","dayCaptions","dayOfWeekFormatter","dayOfWeekCaptionFormatter","push","daysOfWeekCaptions","view","getClassForMonth","classesToApply","monthClass","disabledClass","getClassForDay","dayClassToApply","selectedDayClass","currentDayClass","customDayClass","disabledDayClass","dayCaptionClass","getFormattedDay","dayFormatter","defaultDayFormatter","onDayClick","dayInfo","selectedDate","change","emit","onMonthClick","monthClick","Component","template","styles","providers","ContentChild","read","TemplateRef","Output","Input","DayInfo","MonthCalendarModule","NgModule","imports","BrowserModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\n * Names of the days of the week in English.\n */\nexport const DAY_NAMES = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'    \n];","/**\n * Represents a day of the week.\n */\nexport enum DayOfWeek {\n  Sunday = 0,\n  Monday = 1,\n  Tuesday = 2,\n  Wednesday = 3,\n  Thursday = 4,\n  Friday = 5,\n  Saturday = 6\n}\n","/**\n * Contains several functions to work with\n * dates in JS.\n */\nexport class DateMath {\n\n    private constructor() {}\n\n    /**\n     * Adds days to the specified date.\n     * @param date Date that will be increased.\n     * @param days Number of days to add to the specified\n     * date.\n     */\n    static addDays(date: Date, days: number): Date {\n        const daysAdded = new Date(date.valueOf());\n        daysAdded.setDate(daysAdded.getDate() + days);\n        return daysAdded;\n    }\n\n    /**\n     * Substract days to the specified date.\n     * @param date Date that will be decreased.\n     * @param days Number of days to substract from\n     * the specified date.\n     */\n    static substractDays(date: Date, days: number): Date {\n        return DateMath.addDays(date, -days);\n    }\n\n    /**\n     * Adds a number of months to the specified date.\n     * @param date Date that will be increased.\n     * @param months Months to add.\n     */\n    static addMonths(date: Date, months: number): Date {\n      const monthsAdded = new Date(date.valueOf());\n      monthsAdded.setMonth(date.getMonth() + months);\n      return monthsAdded;\n    }\n\n    /**\n     * Substracts a number of months from the specified date.\n     * @param date Date that will be decreased.\n     * @param months Months to substract.\n     */\n    static substractMonths(date: Date, months: number): Date {\n      const monthsSubstracted = new Date(date.valueOf());\n      monthsSubstracted.setMonth(date.getMonth() - months);\n      return monthsSubstracted;\n    }\n\n    /**\n     * Gets the date corresponding to the first day\n     * of the month of the specified date.\n     * @param date Date.\n     */\n    static getFirstDayOfMonth(date: Date): Date {\n        const firstDay = new Date();\n        firstDay.setFullYear(date.getFullYear(), date.getMonth(), 1);\n        return firstDay;\n    }\n\n    /**\n     * Gets the date corresponding to the last day\n     * of the month of the specified date.\n     * @param date Date.\n     */\n    static getLastDayOfMonth(date: Date): Date {\n        const lastDay = new Date();\n        lastDay.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n        return lastDay;\n    }\n}\n","import { DayOfWeek } from '../day-of-week';\nimport { DateMath } from '../dates/date-math';\nimport { DayInfo } from '../day-info';\n\n/**\n * Creates a view of a month.\n */\nexport class MonthView {\n    private readonly WEEKS_PER_MONTH = 5;\n    private readonly DAYS_PER_WEEK = 7;\n\n  /**\n   * Creates a new instance of MonthView.\n   * @param date Date of the month.\n   */\n  constructor(private date: Date) {}\n\n  /**\n   * Creates the grid corresponding to the month specified\n   * by the date.\n   * @param completeHoles Indicates if the beginning and end\n   * of the grid should be completed with the days of the\n   * adjacent months.\n   * @param weekStart Day of week to be considered the beginning\n   * of the week.\n   */\n  createView(completeHoles = false, weekStart = DayOfWeek.Monday): Array<Array<DayInfo>> {\n    const currentMonthGrid = this.createGrid(this.date, weekStart);\n\n    if (completeHoles) {\n      const needsToBeFilledFromBeginning = !!!currentMonthGrid[0][0];\n\n      if (needsToBeFilledFromBeginning) {\n        const lastMonth = DateMath.substractMonths(this.date, 1);\n        const lastDayOfLastMonth = DateMath.getLastDayOfMonth(lastMonth).getDate();\n\n        const firstDayOfCurrentMonth = DateMath.getFirstDayOfMonth(this.date);\n        const daysToPickFromLastMonth = firstDayOfCurrentMonth.getDay() - weekStart.valueOf();\n\n        for (let i = 0; i < daysToPickFromLastMonth; i++) {\n          const currentDayOfMonth = lastDayOfLastMonth - (daysToPickFromLastMonth - (i + 1));\n          const currentDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), currentDayOfMonth);\n\n          currentMonthGrid[0][i] = {\n            isToday: false,\n            isSelected: false,\n            day: currentDayOfMonth,\n            date: currentDate\n          };\n        }\n      }\n\n      let fillingDays = 1;\n      for (let week = 0; week < this.WEEKS_PER_MONTH; week++) {\n        for (let dayOfWeek = 0; dayOfWeek < this.DAYS_PER_WEEK; dayOfWeek++) {\n          if (!!!currentMonthGrid[week][dayOfWeek]) {\n\n            const fillingDates = new Date(this.date.getFullYear(), this.date.getMonth(), fillingDays++);\n\n            currentMonthGrid[week][dayOfWeek] = {\n              isToday: false,\n              isSelected: false,\n              day: fillingDays,\n              date: fillingDates\n            };\n          }\n        }\n      }\n    }\n\n    return currentMonthGrid;\n  }\n\n  /**\n   * Creates the grid corresponding to the month specified\n   * by the date.\n   * @param date Date to use.\n   * @param weekStart Day of week which will be considered\n   * the beginning of the week.\n   */\n  private createGrid(date: Date, weekStart = DayOfWeek.Monday): Array<Array<DayInfo>> {\n    const grid = this.initGrid();\n    const firstDayOfWeek =\n      DateMath.getFirstDayOfMonth(date).getDay() - weekStart.valueOf();\n    const lastDay = DateMath.getLastDayOfMonth(date).getDate();\n\n    const today = new Date();\n    let dayOfWeek = firstDayOfWeek;\n    let currentDayOfMonth = 1;\n    for (let week = 0; week < this.WEEKS_PER_MONTH; week++) {\n\n      for (; dayOfWeek < this.DAYS_PER_WEEK && currentDayOfMonth <= lastDay; dayOfWeek++) {\n        const todaySameYear = today.getFullYear() === this.date.getFullYear();\n        const todaySameMonth = today.getMonth() === this.date.getMonth();\n        const todaySameDay = today.getDate() === currentDayOfMonth;\n        const currentDate = new Date(this.date.getFullYear(), this.date.getMonth(), currentDayOfMonth);\n\n        grid[week][dayOfWeek] = {\n          isToday: todaySameYear && todaySameMonth && todaySameDay,\n          isSelected: this.date.getDate() === currentDayOfMonth,\n          day: currentDayOfMonth,\n          date: currentDate\n        };\n\n        currentDayOfMonth++;\n      }\n\n      dayOfWeek = 0;\n\n    }\n\n    return grid;\n  }\n\n  /**\n   * Initializes the grid that contains\n   * the info about the \"shape\" of the\n   * month.\n   */\n  private initGrid(): Array<Array<DayInfo>> {\n    const defaultEmpty = undefined;\n    const grid = [\n      new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),\n      new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),\n      new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),\n      new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),\n      new Array(this.DAYS_PER_WEEK).fill(defaultEmpty)\n    ];\n\n    return grid;\n  }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Directive to select the template to use\n * for the day cell.\n */\n@Directive({\n  selector: '[scDayTemplate]'\n})\nexport class DayTemplateDirective {\n\n  constructor() { }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[scDayOfWeekCaptionTemplate]'\n})\nexport class DayOfWeekCaptionTemplateDirective {\n\n  constructor() { }\n\n}\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[scMonthCaptionTemplate]'\n})\nexport class MonthCaptionTemplateDirective {\n\n  constructor() { }\n\n}\n","import { DAY_NAMES } from '../day-names';\nimport { DayOfWeek } from '../day-of-week';\n\n/**\n * Default formatter for the captions of the days\n * of the week.\n * @param dayOfWeek Day of the week.\n */\nexport function defaultDayOfWeekCaptionFormatterFactory(firstDayOfWeek: DayOfWeek): (dayOfWeek: DayOfWeek) => string {\n  return (dayOfWeek: DayOfWeek) => {\n    const formattedDayNames = DAY_NAMES.map(\n      dayName => formatDayName(dayName)\n    );\n\n    const reordered = reorderDays(formattedDayNames, firstDayOfWeek);\n    return reordered[dayOfWeek.valueOf()];\n  };\n}\n\n/**\n * Applies formatting to the name of the day.\n * @param dayName Name of the day.\n */\nfunction formatDayName(dayName: string): string {\n  const newDayName = dayName.substr(0, 1).toUpperCase() + dayName.substr(1, 1).toLowerCase();\n  return newDayName;\n}\n\n/**\n * Reorders the array of names so the first index\n * corresponds with the name of the first day of\n * the week.\n * @param dayNames Array with the names of the days\n * of the week.\n * @param firstDayOfWeek First day of the week.\n */\nfunction reorderDays(dayNames: string[], firstDayOfWeek: DayOfWeek): string[] {\n  const dayCount = DAY_NAMES.length;\n\n  const dayIndex = firstDayOfWeek.valueOf();\n  const reordered = (new Array(dayCount)).fill(0);\n  for (let i = 0; i < dayCount; i++) {\n    const newPosition = (i + dayIndex) % dayCount;\n    reordered[i] = dayNames[newPosition];\n  }\n\n  return reordered;\n}\n","import { Component, EventEmitter, forwardRef, HostBinding, Input, Output, ContentChild, TemplateRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DayInfo } from '../../models/day-info';\nimport { DAY_NAMES } from '../../models/day-names';\nimport { MonthView } from '../../models/views/moth-view';\nimport { DayTemplateDirective } from '../../directives/day-template.directive';\nimport { DayOfWeekCaptionTemplateDirective } from '../../directives/day-of-week-caption-template.directive';\nimport { MonthCaptionTemplateDirective } from '../../directives/month-caption-template.directive';\nimport { DayOfWeek } from '../../models/day-of-week';\nimport { defaultDayOfWeekCaptionFormatterFactory } from '../../models/formatters/day-of-week-caption-formatter';\nimport { GrowMode } from '../../models/grow-mode';\n\n/**\n * Month calendar provider.\n */\nexport const MONTH_CALENDAR_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MonthCalendarComponent),\n  multi: true\n};\n\n/**\n * Control that represents a calendar.\n */\n@Component({\n  selector: 'sc-month-calendar',\n  template: `<!-- Month -->\n<div (click)=\"onMonthClick()\"\n     [ngClass]=\"['column', grow.mode == 'stretch' ? 'stretch-vertically' : '', getClassForMonth()]\">\n\n  <!-- Month caption -->\n  <div class=\"row\">\n\n    <!-- Month caption cell -->\n    <div class=\"w-100\"\n         [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-height]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\">\n\n      <!-- Month caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"monthTemplate ? monthTemplate : defaultMonthTemplate; context: { $implicit: value }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Week captions -->\n  <div class=\"row\">\n\n    <!-- Week captions cell -->\n    <div [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-square]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\"\n         *ngFor=\"let dayOfWeekCaption of daysOfWeekCaptions; let i = index\">\n\n      <!-- Week caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"dayOfWeekTemplate ? dayOfWeekTemplate : defaultDayOfWeekTemplate; context: { $implicit: dayOfWeekCaption, dayOfWeekIndex: i }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Days -->\n  <div class=\"row\"\n       *ngFor=\"let week of view\">\n\n    <!-- Day cell -->\n    <div (click)=\"onDayClick(day)\"\n         class=\"ratio-square label\"\n         [class.ratio-square]=\"grow.mode == 'proportional' || grow.mode == 'mixed'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch'\"\n         *ngFor=\"let day of week\">\n\n      <!-- Day content -->\n      <div class=\"label__content\">\n\n        <ng-container *ngTemplateOutlet=\"dayTemplate ? dayTemplate : defaultDayTemplate; context: { $implicit: day }\"></ng-container>\n\n      </div>\n\n    </div>\n\n  </div>\n\n</div>\n\n\n\n<!-- Templates -->\n\n<!-- Day template -->\n<ng-template #defaultDayTemplate\n             let-day>\n  <div class=\"flex-expanded-container\">\n    <div [ngClass]=\"['flex-expand', getClassForDay(day)]\">{{ getFormattedDay(day) }}</div>\n  </div>\n</ng-template>\n\n<!-- Day of week cells template -->\n<ng-template #defaultDayOfWeekTemplate\n             let-dayOfWeek\n             let-dayOfWeekIndex=\"dayOfWeekIndex\">\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', dayOfWeekCaptionClass]\">\n      {{ dayOfWeek }}\n    </div>\n  </div>\n</ng-template>\n\n<!-- Month cell template -->\n<ng-template #defaultMonthTemplate\n             let-date>\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', monthCaptionClass]\">\n      {{ monthCaption }}\n    </div>\n  </div>\n</ng-template>\n`,\n  styles: [`.column{display:flex;flex-flow:column;flex:1}.row{display:flex;flex:1}.label{position:relative}.label__content{position:absolute;top:0;left:0;bottom:0;right:0}.flex-expanded-container{display:flex;position:absolute;width:100%;height:100%}.flex-expand{flex:1}.flex-centered{display:flex;align-items:center;justify-content:center}.ratio-height{padding-bottom:14.28571%}.ratio-square{padding-bottom:14.28571%;width:14.28571%}.stretch-vertically{height:100%}.stretch-horizontally{width:14.28571%}.fixed-height{display:flex;flex:1}.w-100{width:100%}.sc-month{font-size:2rem}.sc-month--disabled{opacity:.25}.sc-month__caption,.sc-month__week-caption{border:1px solid #000;font-weight:700}.sc-month__day{border:1px solid #000;cursor:pointer}.sc-month__day--disabled{cursor:auto}.sc-month__day--today{background:pink}.sc-month__day--selected{background:#6495ed}`],\n  providers: [MONTH_CALENDAR_VALUE_ACCESSOR]\n})\nexport class MonthCalendarComponent implements ControlValueAccessor, OnInit {\n  @ContentChild(DayTemplateDirective, { read: TemplateRef }) dayTemplate;\n  @ContentChild(DayOfWeekCaptionTemplateDirective, { read: TemplateRef }) dayOfWeekTemplate;\n  @ContentChild(MonthCaptionTemplateDirective, { read: TemplateRef }) monthTemplate;\n\n  /**\n   * Event raised when the user selects a date.\n   */\n  @Output('change') change = new EventEmitter<Date>();\n\n  /**\n   * Event raised when the user clicks the calendar.\n   */\n  @Output('monthClick') monthClick = new EventEmitter<MonthCalendarComponent>();\n\n  /**\n   * Sets if the control should be in a\n   * disabled state.\n   */\n  @Input() disabled = false;\n\n  /**\n   * Date to show.\n   */\n  private _value = new Date();\n\n  get value(): Date {\n    return this._value;\n  }\n\n  @Input() set value(date: Date) {\n    this.writeValue(date);\n  }\n\n  /**\n   * Specifies how a day cell should grow.\n   */\n  private _grow: GrowMode = { mode: 'stretch' };\n\n  @Input() set grow (mode: GrowMode) {\n    if (mode) {\n      this._grow = mode;\n    } else {\n      this._grow = { mode: 'stretch' };\n    }\n  }\n\n  get grow(): GrowMode {\n    return this._grow;\n  }\n\n  private defaultFirstDayOfWeek = DayOfWeek.Sunday;\n\n  private defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this.defaultFirstDayOfWeek);\n\n  /**\n   * First day of the week.\n   */\n  private _firstDayOfWeek: DayOfWeek = this.defaultFirstDayOfWeek;\n\n  @Input() set firstDayOfWeek (dayOfWeek: DayOfWeek) {\n    this._firstDayOfWeek = dayOfWeek;\n    this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this._firstDayOfWeek);\n    this.refresh();\n  }\n\n  get firstDayOfWeek(): DayOfWeek {\n    return this._firstDayOfWeek;\n  }\n\n  /**\n   * Formatter for days.\n   */\n  private _dayFormatter: (day?: DayInfo) => string;\n\n  @Input() set dayFormatter (formatter: (day?: DayInfo) => string) {\n    this._dayFormatter = formatter;\n    this.refresh();\n  }\n\n  get dayFormatter(): (day?: DayInfo) => string {\n    return this._dayFormatter;\n  }\n\n  /**\n   * Captions of the different days of the week.\n   */\n  daysOfWeekCaptions;\n\n  /**\n   * Formatter for the captions of the different\n   * days of the week.\n   */\n  private _dayOfWeekCaptionFormatter: (dayOfWeek: DayOfWeek) => string;\n\n  @Input() set dayOfWeekCaptionFormatter (formatter: (dayOfWeek: DayOfWeek) => string) {\n    this._dayOfWeekCaptionFormatter = formatter;\n    this.refresh();\n  }\n\n  get dayOfWeekCaptionFormatter(): (dayOfWeek: DayOfWeek) => string {\n    return this._dayOfWeekCaptionFormatter;\n  }\n\n  /**\n   * Caption of the month.\n   */\n  monthCaption;\n\n  /**\n   * Formatter for the month caption.\n   */\n  private _monthCaptionFormatter: (date: Date) => string;\n\n  @Input() set monthCaptionFormatter (formatter: (date: Date) => string) {\n    this._monthCaptionFormatter = formatter;\n    this.refresh();\n  }\n\n  get monthCaptionFormatter(): (date: Date) => string {\n    return this._monthCaptionFormatter;\n  }\n\n  /**\n   * Retrieves a CSS class for the specified day.\n   */\n  @Input() customDayClass: (day: DayInfo) => string;\n\n  /**\n   * CSS class for the month.\n   */\n  @Input() monthClass = 'sc-month';\n\n  /**\n   * CSS class for the disabled state.\n   */\n  @Input() disabledClass = 'sc-month--disabled';\n\n  /**\n   * CSS class for the month caption.\n   */\n  @Input() monthCaptionClass = 'sc-month__caption';\n\n  /**\n   * CSS class for the day of the week captions.\n   */\n  @Input() dayOfWeekCaptionClass = 'sc-month__week-caption';\n\n  /**\n   * CSS class for the day captions.\n   */\n  @Input() dayCaptionClass = 'sc-month__day';\n\n  /**\n   * CSS class for the current day.\n   */\n  @Input() currentDayClass = 'sc-month__day--today';\n\n  /**\n   * CSS class for the day when the state is disabled.\n   */\n  @Input() disabledDayClass = 'sc-month__day--disabled';\n\n  /**\n   * CSS class for the selected day.\n   */\n  @Input() selectedDayClass = 'sc-month__day--selected';\n\n  /**\n   * View of the current month.\n   */\n  view;\n\n  private defaultMonthCaptionFormatter = (date: Date) => date.toDateString();\n  private defaultDayFormatter = (day?: DayInfo) => day ? day.day.toString() : '';\n  private onChange = (date: Date) => { };\n  private onTouched = () => { };\n\n  /**\n   * Initializes the component.\n   */\n  ngOnInit() {\n    this.refresh();\n  }\n\n  writeValue(date: Date): void {\n    if (date) {\n      this._value = date;\n      this.refresh();\n      this.onChange(date);\n    }\n  }\n\n  registerOnChange(fn: (date: Date) => {}): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**\n   * Refreshes the component.\n   */\n  private refresh(): void {\n    this.refreshMonthCaption(this.value);\n    this.refreshDayOfWeekCaptions();\n    this.refreshView(this.value);\n  }\n\n  /**\n   * Refreshes the month caption.\n   * @param date Date.\n   */\n  private refreshMonthCaption(date: Date): void {\n    if (this.monthCaptionFormatter) {\n      this.monthCaption = this.monthCaptionFormatter(date);\n    } else {\n      this.monthCaption = this.defaultMonthCaptionFormatter(date);\n    }\n  }\n\n  /**\n   * Refreshes the day of week captions.\n   */\n  private refreshDayOfWeekCaptions(): void {\n    const dayCaptions: string[] = [];\n\n    const dayOfWeekFormatter = this.dayOfWeekCaptionFormatter ?\n      this.dayOfWeekCaptionFormatter :\n      this.defaultDayOfWeekCaptionFormatter;\n\n    for (let i = 0; i < DAY_NAMES.length; i++) {\n      dayCaptions.push(dayOfWeekFormatter(i));\n    }\n\n    this.daysOfWeekCaptions = dayCaptions;\n  }\n\n  /**\n   * Refreshes the calendar view.\n   * @param date Date.\n   */\n  private refreshView(date: Date): void {\n    this.view = new MonthView(date).createView(false, this.firstDayOfWeek);\n  }\n\n  /**\n   * Gets the CSS classes to apply to the month.\n   */\n  getClassForMonth(): string {\n    let classesToApply = this.monthClass;\n\n    if (this.disabled) {\n      classesToApply = this.monthClass + ' ' + this.disabledClass;\n    }\n\n    return classesToApply;\n  }\n\n  /**\n   * Gets the CSS class applicable to\n   * the specified day.\n   * @param day Day.\n   */\n  getClassForDay(day?: DayInfo): string {\n    let dayClassToApply = '';\n\n    if (day) {\n\n      if (day.day === this.value.getDate()) {\n        dayClassToApply = this.selectedDayClass;\n      } else if (day.isToday) {\n        dayClassToApply = this.currentDayClass;\n      } else if (this.customDayClass) {\n        const date = new Date(this.value.valueOf());\n        date.setDate(day.day);\n        dayClassToApply = this.customDayClass(day);\n      }\n\n      if (this.disabled) {\n        dayClassToApply = dayClassToApply + ' ' + this.disabledDayClass;\n      }\n\n      return this.dayCaptionClass + ' ' + dayClassToApply;\n    } else {\n      return this.dayCaptionClass;\n    }\n  }\n\n  /**\n   * Gets a formatted string corresponding\n   * to the specified day.\n   * @param day Day to format.\n   */\n  getFormattedDay(day: DayInfo): string {\n    if (this.dayFormatter) {\n      return this.dayFormatter(day);\n    } else {\n      return this.defaultDayFormatter(day);\n    }\n  }\n\n  /**\n   * Controls the click event of a day cell.\n   * @param dayInfo Info about the selected day.\n   */\n  onDayClick(dayInfo: DayInfo): void {\n    if (!this.disabled && dayInfo) {\n      const selectedDate = new Date(this.value.valueOf());\n      selectedDate.setDate(dayInfo.day);\n\n      this.value = new Date(selectedDate.valueOf());\n\n      this.change.emit(selectedDate);\n    }\n  }\n\n  /**\n   * Controls the click event of the month.\n   */\n  onMonthClick(): void {\n    if (!this.disabled) {\n      this.monthClick.emit(this);\n    }\n  }\n}\n","/**\n * Represents information about one\n * day of the month.\n */\nexport class DayInfo {\n    isToday: boolean;\n    isSelected: boolean;\n    day: number;\n    date: Date;\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MonthCalendarComponent } from './components/month-calendar/month-calendar.component';\nimport { MonthCaptionTemplateDirective } from './directives/month-caption-template.directive';\nimport { DayOfWeekCaptionTemplateDirective } from './directives/day-of-week-caption-template.directive';\nimport { DayTemplateDirective } from './directives/day-template.directive';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    MonthCalendarComponent,\n    MonthCaptionTemplateDirective,\n    DayOfWeekCaptionTemplateDirective,\n    DayTemplateDirective\n  ],\n  exports: [\n    MonthCalendarComponent,\n    MonthCaptionTemplateDirective,\n    DayOfWeekCaptionTemplateDirective,\n    DayTemplateDirective\n  ]\n})\nexport class MonthCalendarModule { }\n"]}