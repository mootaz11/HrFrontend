import { Directive, Component, EventEmitter, forwardRef, Input, Output, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** *
 * Names of the days of the week in English.
  @type {?} */
const DAY_NAMES = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const DayOfWeek = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
DayOfWeek[DayOfWeek.Sunday] = 'Sunday';
DayOfWeek[DayOfWeek.Monday] = 'Monday';
DayOfWeek[DayOfWeek.Tuesday] = 'Tuesday';
DayOfWeek[DayOfWeek.Wednesday] = 'Wednesday';
DayOfWeek[DayOfWeek.Thursday] = 'Thursday';
DayOfWeek[DayOfWeek.Friday] = 'Friday';
DayOfWeek[DayOfWeek.Saturday] = 'Saturday';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Contains several functions to work with
 * dates in JS.
 */
class DateMath {
    constructor() { }
    /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    static addDays(date, days) {
        /** @type {?} */
        const daysAdded = new Date(date.valueOf());
        daysAdded.setDate(daysAdded.getDate() + days);
        return daysAdded;
    }
    /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    static substractDays(date, days) {
        return DateMath.addDays(date, -days);
    }
    /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    static addMonths(date, months) {
        /** @type {?} */
        const monthsAdded = new Date(date.valueOf());
        monthsAdded.setMonth(date.getMonth() + months);
        return monthsAdded;
    }
    /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    static substractMonths(date, months) {
        /** @type {?} */
        const monthsSubstracted = new Date(date.valueOf());
        monthsSubstracted.setMonth(date.getMonth() - months);
        return monthsSubstracted;
    }
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    static getFirstDayOfMonth(date) {
        /** @type {?} */
        const firstDay = new Date();
        firstDay.setFullYear(date.getFullYear(), date.getMonth(), 1);
        return firstDay;
    }
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    static getLastDayOfMonth(date) {
        /** @type {?} */
        const lastDay = new Date();
        lastDay.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
        return lastDay;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Creates a view of a month.
 */
class MonthView {
    /**
     * Creates a new instance of MonthView.
     * @param {?} date Date of the month.
     */
    constructor(date) {
        this.date = date;
        this.WEEKS_PER_MONTH = 5;
        this.DAYS_PER_WEEK = 7;
    }
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?=} completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param {?=} weekStart Day of week to be considered the beginning
     * of the week.
     * @return {?}
     */
    createView(completeHoles = false, weekStart = DayOfWeek.Monday) {
        /** @type {?} */
        const currentMonthGrid = this.createGrid(this.date, weekStart);
        if (completeHoles) {
            /** @type {?} */
            const needsToBeFilledFromBeginning = !!!currentMonthGrid[0][0];
            if (needsToBeFilledFromBeginning) {
                /** @type {?} */
                const lastMonth = DateMath.substractMonths(this.date, 1);
                /** @type {?} */
                const lastDayOfLastMonth = DateMath.getLastDayOfMonth(lastMonth).getDate();
                /** @type {?} */
                const firstDayOfCurrentMonth = DateMath.getFirstDayOfMonth(this.date);
                /** @type {?} */
                const daysToPickFromLastMonth = firstDayOfCurrentMonth.getDay() - weekStart.valueOf();
                for (let i = 0; i < daysToPickFromLastMonth; i++) {
                    /** @type {?} */
                    const currentDayOfMonth = lastDayOfLastMonth - (daysToPickFromLastMonth - (i + 1));
                    /** @type {?} */
                    const currentDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), currentDayOfMonth);
                    currentMonthGrid[0][i] = {
                        isToday: false,
                        isSelected: false,
                        day: currentDayOfMonth,
                        date: currentDate
                    };
                }
            }
            /** @type {?} */
            let fillingDays = 1;
            for (let week = 0; week < this.WEEKS_PER_MONTH; week++) {
                for (let dayOfWeek = 0; dayOfWeek < this.DAYS_PER_WEEK; dayOfWeek++) {
                    if (!!!currentMonthGrid[week][dayOfWeek]) {
                        /** @type {?} */
                        const fillingDates = new Date(this.date.getFullYear(), this.date.getMonth(), fillingDays++);
                        currentMonthGrid[week][dayOfWeek] = {
                            isToday: false,
                            isSelected: false,
                            day: fillingDays,
                            date: fillingDates
                        };
                    }
                }
            }
        }
        return currentMonthGrid;
    }
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?} date Date to use.
     * @param {?=} weekStart Day of week which will be considered
     * the beginning of the week.
     * @return {?}
     */
    createGrid(date, weekStart = DayOfWeek.Monday) {
        /** @type {?} */
        const grid = this.initGrid();
        /** @type {?} */
        const firstDayOfWeek = DateMath.getFirstDayOfMonth(date).getDay() - weekStart.valueOf();
        /** @type {?} */
        const lastDay = DateMath.getLastDayOfMonth(date).getDate();
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        let dayOfWeek = firstDayOfWeek;
        /** @type {?} */
        let currentDayOfMonth = 1;
        for (let week = 0; week < this.WEEKS_PER_MONTH; week++) {
            for (; dayOfWeek < this.DAYS_PER_WEEK && currentDayOfMonth <= lastDay; dayOfWeek++) {
                /** @type {?} */
                const todaySameYear = today.getFullYear() === this.date.getFullYear();
                /** @type {?} */
                const todaySameMonth = today.getMonth() === this.date.getMonth();
                /** @type {?} */
                const todaySameDay = today.getDate() === currentDayOfMonth;
                /** @type {?} */
                const currentDate = new Date(this.date.getFullYear(), this.date.getMonth(), currentDayOfMonth);
                grid[week][dayOfWeek] = {
                    isToday: todaySameYear && todaySameMonth && todaySameDay,
                    isSelected: this.date.getDate() === currentDayOfMonth,
                    day: currentDayOfMonth,
                    date: currentDate
                };
                currentDayOfMonth++;
            }
            dayOfWeek = 0;
        }
        return grid;
    }
    /**
     * Initializes the grid that contains
     * the info about the "shape" of the
     * month.
     * @return {?}
     */
    initGrid() {
        /** @type {?} */
        const defaultEmpty = undefined;
        /** @type {?} */
        const grid = [
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty)
        ];
        return grid;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Directive to select the template to use
 * for the day cell.
 */
class DayTemplateDirective {
    constructor() { }
}
DayTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scDayTemplate]'
            },] },
];
/** @nocollapse */
DayTemplateDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DayOfWeekCaptionTemplateDirective {
    constructor() { }
}
DayOfWeekCaptionTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scDayOfWeekCaptionTemplate]'
            },] },
];
/** @nocollapse */
DayOfWeekCaptionTemplateDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MonthCaptionTemplateDirective {
    constructor() { }
}
MonthCaptionTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scMonthCaptionTemplate]'
            },] },
];
/** @nocollapse */
MonthCaptionTemplateDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Default formatter for the captions of the days
 * of the week.
 * @param {?} firstDayOfWeek
 * @return {?}
 */
function defaultDayOfWeekCaptionFormatterFactory(firstDayOfWeek) {
    return (dayOfWeek) => {
        /** @type {?} */
        const formattedDayNames = DAY_NAMES.map(dayName => formatDayName(dayName));
        /** @type {?} */
        const reordered = reorderDays(formattedDayNames, firstDayOfWeek);
        return reordered[dayOfWeek.valueOf()];
    };
}
/**
 * Applies formatting to the name of the day.
 * @param {?} dayName Name of the day.
 * @return {?}
 */
function formatDayName(dayName) {
    /** @type {?} */
    const newDayName = dayName.substr(0, 1).toUpperCase() + dayName.substr(1, 1).toLowerCase();
    return newDayName;
}
/**
 * Reorders the array of names so the first index
 * corresponds with the name of the first day of
 * the week.
 * @param {?} dayNames Array with the names of the days
 * of the week.
 * @param {?} firstDayOfWeek First day of the week.
 * @return {?}
 */
function reorderDays(dayNames, firstDayOfWeek) {
    /** @type {?} */
    const dayCount = DAY_NAMES.length;
    /** @type {?} */
    const dayIndex = firstDayOfWeek.valueOf();
    /** @type {?} */
    const reordered = (new Array(dayCount)).fill(0);
    for (let i = 0; i < dayCount; i++) {
        /** @type {?} */
        const newPosition = (i + dayIndex) % dayCount;
        reordered[i] = dayNames[newPosition];
    }
    return reordered;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** *
 * Month calendar provider.
  @type {?} */
const MONTH_CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MonthCalendarComponent),
    multi: true
};
/**
 * Control that represents a calendar.
 */
class MonthCalendarComponent {
    constructor() {
        /**
         * Event raised when the user selects a date.
         */
        this.change = new EventEmitter();
        /**
         * Event raised when the user clicks the calendar.
         */
        this.monthClick = new EventEmitter();
        /**
         * Sets if the control should be in a
         * disabled state.
         */
        this.disabled = false;
        /**
         * Date to show.
         */
        this._value = new Date();
        /**
         * Specifies how a day cell should grow.
         */
        this._grow = { mode: 'stretch' };
        this.defaultFirstDayOfWeek = DayOfWeek.Sunday;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this.defaultFirstDayOfWeek);
        /**
         * First day of the week.
         */
        this._firstDayOfWeek = this.defaultFirstDayOfWeek;
        /**
         * CSS class for the month.
         */
        this.monthClass = 'sc-month';
        /**
         * CSS class for the disabled state.
         */
        this.disabledClass = 'sc-month--disabled';
        /**
         * CSS class for the month caption.
         */
        this.monthCaptionClass = 'sc-month__caption';
        /**
         * CSS class for the day of the week captions.
         */
        this.dayOfWeekCaptionClass = 'sc-month__week-caption';
        /**
         * CSS class for the day captions.
         */
        this.dayCaptionClass = 'sc-month__day';
        /**
         * CSS class for the current day.
         */
        this.currentDayClass = 'sc-month__day--today';
        /**
         * CSS class for the day when the state is disabled.
         */
        this.disabledDayClass = 'sc-month__day--disabled';
        /**
         * CSS class for the selected day.
         */
        this.selectedDayClass = 'sc-month__day--selected';
        this.defaultMonthCaptionFormatter = (date) => date.toDateString();
        this.defaultDayFormatter = (day) => day ? day.day.toString() : '';
        this.onChange = (date) => { };
        this.onTouched = () => { };
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    set value(date) {
        this.writeValue(date);
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    set grow(mode) {
        if (mode) {
            this._grow = mode;
        }
        else {
            this._grow = { mode: 'stretch' };
        }
    }
    /**
     * @return {?}
     */
    get grow() {
        return this._grow;
    }
    /**
     * @param {?} dayOfWeek
     * @return {?}
     */
    set firstDayOfWeek(dayOfWeek) {
        this._firstDayOfWeek = dayOfWeek;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this._firstDayOfWeek);
        this.refresh();
    }
    /**
     * @return {?}
     */
    get firstDayOfWeek() {
        return this._firstDayOfWeek;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set dayFormatter(formatter) {
        this._dayFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get dayFormatter() {
        return this._dayFormatter;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set dayOfWeekCaptionFormatter(formatter) {
        this._dayOfWeekCaptionFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get dayOfWeekCaptionFormatter() {
        return this._dayOfWeekCaptionFormatter;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set monthCaptionFormatter(formatter) {
        this._monthCaptionFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get monthCaptionFormatter() {
        return this._monthCaptionFormatter;
    }
    /**
     * Initializes the component.
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    writeValue(date) {
        if (date) {
            this._value = date;
            this.refresh();
            this.onChange(date);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Refreshes the component.
     * @return {?}
     */
    refresh() {
        this.refreshMonthCaption(this.value);
        this.refreshDayOfWeekCaptions();
        this.refreshView(this.value);
    }
    /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    refreshMonthCaption(date) {
        if (this.monthCaptionFormatter) {
            this.monthCaption = this.monthCaptionFormatter(date);
        }
        else {
            this.monthCaption = this.defaultMonthCaptionFormatter(date);
        }
    }
    /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    refreshDayOfWeekCaptions() {
        /** @type {?} */
        const dayCaptions = [];
        /** @type {?} */
        const dayOfWeekFormatter = this.dayOfWeekCaptionFormatter ?
            this.dayOfWeekCaptionFormatter :
            this.defaultDayOfWeekCaptionFormatter;
        for (let i = 0; i < DAY_NAMES.length; i++) {
            dayCaptions.push(dayOfWeekFormatter(i));
        }
        this.daysOfWeekCaptions = dayCaptions;
    }
    /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    refreshView(date) {
        this.view = new MonthView(date).createView(false, this.firstDayOfWeek);
    }
    /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    getClassForMonth() {
        /** @type {?} */
        let classesToApply = this.monthClass;
        if (this.disabled) {
            classesToApply = this.monthClass + ' ' + this.disabledClass;
        }
        return classesToApply;
    }
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    getClassForDay(day) {
        /** @type {?} */
        let dayClassToApply = '';
        if (day) {
            if (day.day === this.value.getDate()) {
                dayClassToApply = this.selectedDayClass;
            }
            else if (day.isToday) {
                dayClassToApply = this.currentDayClass;
            }
            else if (this.customDayClass) {
                /** @type {?} */
                const date = new Date(this.value.valueOf());
                date.setDate(day.day);
                dayClassToApply = this.customDayClass(day);
            }
            if (this.disabled) {
                dayClassToApply = dayClassToApply + ' ' + this.disabledDayClass;
            }
            return this.dayCaptionClass + ' ' + dayClassToApply;
        }
        else {
            return this.dayCaptionClass;
        }
    }
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    getFormattedDay(day) {
        if (this.dayFormatter) {
            return this.dayFormatter(day);
        }
        else {
            return this.defaultDayFormatter(day);
        }
    }
    /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    onDayClick(dayInfo) {
        if (!this.disabled && dayInfo) {
            /** @type {?} */
            const selectedDate = new Date(this.value.valueOf());
            selectedDate.setDate(dayInfo.day);
            this.value = new Date(selectedDate.valueOf());
            this.change.emit(selectedDate);
        }
    }
    /**
     * Controls the click event of the month.
     * @return {?}
     */
    onMonthClick() {
        if (!this.disabled) {
            this.monthClick.emit(this);
        }
    }
}
MonthCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'sc-month-calendar',
                template: `<!-- Month -->
<div (click)="onMonthClick()"
     [ngClass]="['column', grow.mode == 'stretch' ? 'stretch-vertically' : '', getClassForMonth()]">

  <!-- Month caption -->
  <div class="row">

    <!-- Month caption cell -->
    <div class="w-100"
         [class.label]="grow.mode != 'mixed'"
         [class.ratio-height]="grow.mode == 'proportional'"
         [class.stretch-horizontally]="grow.mode == 'stretch' || grow.mode == 'mixed'">

      <!-- Month caption cell content -->
      <div [class.label__content]="grow.mode != 'mixed'">

        <ng-container *ngTemplateOutlet="monthTemplate ? monthTemplate : defaultMonthTemplate; context: { $implicit: value }"></ng-container>

      </div>
    </div>
  </div>

  <!-- Week captions -->
  <div class="row">

    <!-- Week captions cell -->
    <div [class.label]="grow.mode != 'mixed'"
         [class.ratio-square]="grow.mode == 'proportional'"
         [class.stretch-horizontally]="grow.mode == 'stretch' || grow.mode == 'mixed'"
         *ngFor="let dayOfWeekCaption of daysOfWeekCaptions; let i = index">

      <!-- Week caption cell content -->
      <div [class.label__content]="grow.mode != 'mixed'">

        <ng-container *ngTemplateOutlet="dayOfWeekTemplate ? dayOfWeekTemplate : defaultDayOfWeekTemplate; context: { $implicit: dayOfWeekCaption, dayOfWeekIndex: i }"></ng-container>

      </div>
    </div>
  </div>

  <!-- Days -->
  <div class="row"
       *ngFor="let week of view">

    <!-- Day cell -->
    <div (click)="onDayClick(day)"
         class="ratio-square label"
         [class.ratio-square]="grow.mode == 'proportional' || grow.mode == 'mixed'"
         [class.stretch-horizontally]="grow.mode == 'stretch'"
         *ngFor="let day of week">

      <!-- Day content -->
      <div class="label__content">

        <ng-container *ngTemplateOutlet="dayTemplate ? dayTemplate : defaultDayTemplate; context: { $implicit: day }"></ng-container>

      </div>

    </div>

  </div>

</div>



<!-- Templates -->

<!-- Day template -->
<ng-template #defaultDayTemplate
             let-day>
  <div class="flex-expanded-container">
    <div [ngClass]="['flex-expand', getClassForDay(day)]">{{ getFormattedDay(day) }}</div>
  </div>
</ng-template>

<!-- Day of week cells template -->
<ng-template #defaultDayOfWeekTemplate
             let-dayOfWeek
             let-dayOfWeekIndex="dayOfWeekIndex">
  <div [class.flex-expanded-container]="grow.mode != 'mixed'">
    <div [ngClass]="['flex-expand', 'flex-centered', dayOfWeekCaptionClass]">
      {{ dayOfWeek }}
    </div>
  </div>
</ng-template>

<!-- Month cell template -->
<ng-template #defaultMonthTemplate
             let-date>
  <div [class.flex-expanded-container]="grow.mode != 'mixed'">
    <div [ngClass]="['flex-expand', 'flex-centered', monthCaptionClass]">
      {{ monthCaption }}
    </div>
  </div>
</ng-template>
`,
                styles: [`.column{display:flex;flex-flow:column;flex:1}.row{display:flex;flex:1}.label{position:relative}.label__content{position:absolute;top:0;left:0;bottom:0;right:0}.flex-expanded-container{display:flex;position:absolute;width:100%;height:100%}.flex-expand{flex:1}.flex-centered{display:flex;align-items:center;justify-content:center}.ratio-height{padding-bottom:14.28571%}.ratio-square{padding-bottom:14.28571%;width:14.28571%}.stretch-vertically{height:100%}.stretch-horizontally{width:14.28571%}.fixed-height{display:flex;flex:1}.w-100{width:100%}.sc-month{font-size:2rem}.sc-month--disabled{opacity:.25}.sc-month__caption,.sc-month__week-caption{border:1px solid #000;font-weight:700}.sc-month__day{border:1px solid #000;cursor:pointer}.sc-month__day--disabled{cursor:auto}.sc-month__day--today{background:pink}.sc-month__day--selected{background:#6495ed}`],
                providers: [MONTH_CALENDAR_VALUE_ACCESSOR]
            },] },
];
MonthCalendarComponent.propDecorators = {
    dayTemplate: [{ type: ContentChild, args: [DayTemplateDirective, { read: TemplateRef },] }],
    dayOfWeekTemplate: [{ type: ContentChild, args: [DayOfWeekCaptionTemplateDirective, { read: TemplateRef },] }],
    monthTemplate: [{ type: ContentChild, args: [MonthCaptionTemplateDirective, { read: TemplateRef },] }],
    change: [{ type: Output, args: ['change',] }],
    monthClick: [{ type: Output, args: ['monthClick',] }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    grow: [{ type: Input }],
    firstDayOfWeek: [{ type: Input }],
    dayFormatter: [{ type: Input }],
    dayOfWeekCaptionFormatter: [{ type: Input }],
    monthCaptionFormatter: [{ type: Input }],
    customDayClass: [{ type: Input }],
    monthClass: [{ type: Input }],
    disabledClass: [{ type: Input }],
    monthCaptionClass: [{ type: Input }],
    dayOfWeekCaptionClass: [{ type: Input }],
    dayCaptionClass: [{ type: Input }],
    currentDayClass: [{ type: Input }],
    disabledDayClass: [{ type: Input }],
    selectedDayClass: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Represents information about one
 * day of the month.
 */
class DayInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class MonthCalendarModule {
}
MonthCalendarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    BrowserModule,
                    FormsModule
                ],
                declarations: [
                    MonthCalendarComponent,
                    MonthCaptionTemplateDirective,
                    DayOfWeekCaptionTemplateDirective,
                    DayTemplateDirective
                ],
                exports: [
                    MonthCalendarComponent,
                    MonthCaptionTemplateDirective,
                    DayOfWeekCaptionTemplateDirective,
                    DayTemplateDirective
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MONTH_CALENDAR_VALUE_ACCESSOR, MonthCalendarComponent, MonthCaptionTemplateDirective, DayOfWeekCaptionTemplateDirective, DayTemplateDirective, DayInfo, DayOfWeek, MonthCalendarModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,