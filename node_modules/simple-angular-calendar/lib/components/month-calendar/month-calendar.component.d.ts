import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DayInfo } from '../../models/day-info';
import { DayOfWeek } from '../../models/day-of-week';
import { GrowMode } from '../../models/grow-mode';
/**
 * Month calendar provider.
 */
export declare const MONTH_CALENDAR_VALUE_ACCESSOR: any;
/**
 * Control that represents a calendar.
 */
export declare class MonthCalendarComponent implements ControlValueAccessor, OnInit {
    dayTemplate: any;
    dayOfWeekTemplate: any;
    monthTemplate: any;
    /**
     * Event raised when the user selects a date.
     */
    change: EventEmitter<Date>;
    /**
     * Event raised when the user clicks the calendar.
     */
    monthClick: EventEmitter<MonthCalendarComponent>;
    /**
     * Sets if the control should be in a
     * disabled state.
     */
    disabled: boolean;
    /**
     * Date to show.
     */
    private _value;
    value: Date;
    /**
     * Specifies how a day cell should grow.
     */
    private _grow;
    grow: GrowMode;
    private defaultFirstDayOfWeek;
    private defaultDayOfWeekCaptionFormatter;
    /**
     * First day of the week.
     */
    private _firstDayOfWeek;
    firstDayOfWeek: DayOfWeek;
    /**
     * Formatter for days.
     */
    private _dayFormatter;
    dayFormatter: (day?: DayInfo) => string;
    /**
     * Captions of the different days of the week.
     */
    daysOfWeekCaptions: any;
    /**
     * Formatter for the captions of the different
     * days of the week.
     */
    private _dayOfWeekCaptionFormatter;
    dayOfWeekCaptionFormatter: (dayOfWeek: DayOfWeek) => string;
    /**
     * Caption of the month.
     */
    monthCaption: any;
    /**
     * Formatter for the month caption.
     */
    private _monthCaptionFormatter;
    monthCaptionFormatter: (date: Date) => string;
    /**
     * Retrieves a CSS class for the specified day.
     */
    customDayClass: (day: DayInfo) => string;
    /**
     * CSS class for the month.
     */
    monthClass: string;
    /**
     * CSS class for the disabled state.
     */
    disabledClass: string;
    /**
     * CSS class for the month caption.
     */
    monthCaptionClass: string;
    /**
     * CSS class for the day of the week captions.
     */
    dayOfWeekCaptionClass: string;
    /**
     * CSS class for the day captions.
     */
    dayCaptionClass: string;
    /**
     * CSS class for the current day.
     */
    currentDayClass: string;
    /**
     * CSS class for the day when the state is disabled.
     */
    disabledDayClass: string;
    /**
     * CSS class for the selected day.
     */
    selectedDayClass: string;
    /**
     * View of the current month.
     */
    view: any;
    private defaultMonthCaptionFormatter;
    private defaultDayFormatter;
    private onChange;
    private onTouched;
    /**
     * Initializes the component.
     */
    ngOnInit(): void;
    writeValue(date: Date): void;
    registerOnChange(fn: (date: Date) => {}): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Refreshes the component.
     */
    private refresh();
    /**
     * Refreshes the month caption.
     * @param date Date.
     */
    private refreshMonthCaption(date);
    /**
     * Refreshes the day of week captions.
     */
    private refreshDayOfWeekCaptions();
    /**
     * Refreshes the calendar view.
     * @param date Date.
     */
    private refreshView(date);
    /**
     * Gets the CSS classes to apply to the month.
     */
    getClassForMonth(): string;
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param day Day.
     */
    getClassForDay(day?: DayInfo): string;
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param day Day to format.
     */
    getFormattedDay(day: DayInfo): string;
    /**
     * Controls the click event of a day cell.
     * @param dayInfo Info about the selected day.
     */
    onDayClick(dayInfo: DayInfo): void;
    /**
     * Controls the click event of the month.
     */
    onMonthClick(): void;
}
