import { Directive, Component, EventEmitter, forwardRef, Input, Output, ContentChild, TemplateRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** *
 * Names of the days of the week in English.
  @type {?} */
var DAY_NAMES = [
    'Sunday',
    'Monday',
    'Tuesday',
    'Wednesday',
    'Thursday',
    'Friday',
    'Saturday'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var DayOfWeek = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
DayOfWeek[DayOfWeek.Sunday] = 'Sunday';
DayOfWeek[DayOfWeek.Monday] = 'Monday';
DayOfWeek[DayOfWeek.Tuesday] = 'Tuesday';
DayOfWeek[DayOfWeek.Wednesday] = 'Wednesday';
DayOfWeek[DayOfWeek.Thursday] = 'Thursday';
DayOfWeek[DayOfWeek.Friday] = 'Friday';
DayOfWeek[DayOfWeek.Saturday] = 'Saturday';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Contains several functions to work with
 * dates in JS.
 */
var /**
 * Contains several functions to work with
 * dates in JS.
 */
DateMath = /** @class */ (function () {
    function DateMath() {
    }
    /**
     * Adds days to the specified date.
     * @param date Date that will be increased.
     * @param days Number of days to add to the specified
     * date.
     */
    /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    DateMath.addDays = /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    function (date, days) {
        /** @type {?} */
        var daysAdded = new Date(date.valueOf());
        daysAdded.setDate(daysAdded.getDate() + days);
        return daysAdded;
    };
    /**
     * Substract days to the specified date.
     * @param date Date that will be decreased.
     * @param days Number of days to substract from
     * the specified date.
     */
    /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    DateMath.substractDays = /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    function (date, days) {
        return DateMath.addDays(date, -days);
    };
    /**
     * Adds a number of months to the specified date.
     * @param date Date that will be increased.
     * @param months Months to add.
     */
    /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    DateMath.addMonths = /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    function (date, months) {
        /** @type {?} */
        var monthsAdded = new Date(date.valueOf());
        monthsAdded.setMonth(date.getMonth() + months);
        return monthsAdded;
    };
    /**
     * Substracts a number of months from the specified date.
     * @param date Date that will be decreased.
     * @param months Months to substract.
     */
    /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    DateMath.substractMonths = /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    function (date, months) {
        /** @type {?} */
        var monthsSubstracted = new Date(date.valueOf());
        monthsSubstracted.setMonth(date.getMonth() - months);
        return monthsSubstracted;
    };
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param date Date.
     */
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    DateMath.getFirstDayOfMonth = /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var firstDay = new Date();
        firstDay.setFullYear(date.getFullYear(), date.getMonth(), 1);
        return firstDay;
    };
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param date Date.
     */
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    DateMath.getLastDayOfMonth = /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var lastDay = new Date();
        lastDay.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
        return lastDay;
    };
    return DateMath;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Creates a view of a month.
 */
var /**
 * Creates a view of a month.
 */
MonthView = /** @class */ (function () {
    /**
     * Creates a new instance of MonthView.
     * @param date Date of the month.
     */
    function MonthView(date) {
        this.date = date;
        this.WEEKS_PER_MONTH = 5;
        this.DAYS_PER_WEEK = 7;
    }
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param weekStart Day of week to be considered the beginning
     * of the week.
     */
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?=} completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param {?=} weekStart Day of week to be considered the beginning
     * of the week.
     * @return {?}
     */
    MonthView.prototype.createView = /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?=} completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param {?=} weekStart Day of week to be considered the beginning
     * of the week.
     * @return {?}
     */
    function (completeHoles, weekStart) {
        if (completeHoles === void 0) { completeHoles = false; }
        if (weekStart === void 0) { weekStart = DayOfWeek.Monday; }
        /** @type {?} */
        var currentMonthGrid = this.createGrid(this.date, weekStart);
        if (completeHoles) {
            /** @type {?} */
            var needsToBeFilledFromBeginning = !!!currentMonthGrid[0][0];
            if (needsToBeFilledFromBeginning) {
                /** @type {?} */
                var lastMonth = DateMath.substractMonths(this.date, 1);
                /** @type {?} */
                var lastDayOfLastMonth = DateMath.getLastDayOfMonth(lastMonth).getDate();
                /** @type {?} */
                var firstDayOfCurrentMonth = DateMath.getFirstDayOfMonth(this.date);
                /** @type {?} */
                var daysToPickFromLastMonth = firstDayOfCurrentMonth.getDay() - weekStart.valueOf();
                for (var i = 0; i < daysToPickFromLastMonth; i++) {
                    /** @type {?} */
                    var currentDayOfMonth = lastDayOfLastMonth - (daysToPickFromLastMonth - (i + 1));
                    /** @type {?} */
                    var currentDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), currentDayOfMonth);
                    currentMonthGrid[0][i] = {
                        isToday: false,
                        isSelected: false,
                        day: currentDayOfMonth,
                        date: currentDate
                    };
                }
            }
            /** @type {?} */
            var fillingDays = 1;
            for (var week = 0; week < this.WEEKS_PER_MONTH; week++) {
                for (var dayOfWeek = 0; dayOfWeek < this.DAYS_PER_WEEK; dayOfWeek++) {
                    if (!!!currentMonthGrid[week][dayOfWeek]) {
                        /** @type {?} */
                        var fillingDates = new Date(this.date.getFullYear(), this.date.getMonth(), fillingDays++);
                        currentMonthGrid[week][dayOfWeek] = {
                            isToday: false,
                            isSelected: false,
                            day: fillingDays,
                            date: fillingDates
                        };
                    }
                }
            }
        }
        return currentMonthGrid;
    };
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?} date Date to use.
     * @param {?=} weekStart Day of week which will be considered
     * the beginning of the week.
     * @return {?}
     */
    MonthView.prototype.createGrid = /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?} date Date to use.
     * @param {?=} weekStart Day of week which will be considered
     * the beginning of the week.
     * @return {?}
     */
    function (date, weekStart) {
        if (weekStart === void 0) { weekStart = DayOfWeek.Monday; }
        /** @type {?} */
        var grid = this.initGrid();
        /** @type {?} */
        var firstDayOfWeek = DateMath.getFirstDayOfMonth(date).getDay() - weekStart.valueOf();
        /** @type {?} */
        var lastDay = DateMath.getLastDayOfMonth(date).getDate();
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var dayOfWeek = firstDayOfWeek;
        /** @type {?} */
        var currentDayOfMonth = 1;
        for (var week = 0; week < this.WEEKS_PER_MONTH; week++) {
            for (; dayOfWeek < this.DAYS_PER_WEEK && currentDayOfMonth <= lastDay; dayOfWeek++) {
                /** @type {?} */
                var todaySameYear = today.getFullYear() === this.date.getFullYear();
                /** @type {?} */
                var todaySameMonth = today.getMonth() === this.date.getMonth();
                /** @type {?} */
                var todaySameDay = today.getDate() === currentDayOfMonth;
                /** @type {?} */
                var currentDate = new Date(this.date.getFullYear(), this.date.getMonth(), currentDayOfMonth);
                grid[week][dayOfWeek] = {
                    isToday: todaySameYear && todaySameMonth && todaySameDay,
                    isSelected: this.date.getDate() === currentDayOfMonth,
                    day: currentDayOfMonth,
                    date: currentDate
                };
                currentDayOfMonth++;
            }
            dayOfWeek = 0;
        }
        return grid;
    };
    /**
     * Initializes the grid that contains
     * the info about the "shape" of the
     * month.
     * @return {?}
     */
    MonthView.prototype.initGrid = /**
     * Initializes the grid that contains
     * the info about the "shape" of the
     * month.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultEmpty = undefined;
        /** @type {?} */
        var grid = [
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty)
        ];
        return grid;
    };
    return MonthView;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Directive to select the template to use
 * for the day cell.
 */
var DayTemplateDirective = /** @class */ (function () {
    function DayTemplateDirective() {
    }
    DayTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scDayTemplate]'
                },] },
    ];
    /** @nocollapse */
    DayTemplateDirective.ctorParameters = function () { return []; };
    return DayTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var DayOfWeekCaptionTemplateDirective = /** @class */ (function () {
    function DayOfWeekCaptionTemplateDirective() {
    }
    DayOfWeekCaptionTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scDayOfWeekCaptionTemplate]'
                },] },
    ];
    /** @nocollapse */
    DayOfWeekCaptionTemplateDirective.ctorParameters = function () { return []; };
    return DayOfWeekCaptionTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MonthCaptionTemplateDirective = /** @class */ (function () {
    function MonthCaptionTemplateDirective() {
    }
    MonthCaptionTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scMonthCaptionTemplate]'
                },] },
    ];
    /** @nocollapse */
    MonthCaptionTemplateDirective.ctorParameters = function () { return []; };
    return MonthCaptionTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Default formatter for the captions of the days
 * of the week.
 * @param {?} firstDayOfWeek
 * @return {?}
 */
function defaultDayOfWeekCaptionFormatterFactory(firstDayOfWeek) {
    return function (dayOfWeek) {
        /** @type {?} */
        var formattedDayNames = DAY_NAMES.map(function (dayName) { return formatDayName(dayName); });
        /** @type {?} */
        var reordered = reorderDays(formattedDayNames, firstDayOfWeek);
        return reordered[dayOfWeek.valueOf()];
    };
}
/**
 * Applies formatting to the name of the day.
 * @param {?} dayName Name of the day.
 * @return {?}
 */
function formatDayName(dayName) {
    /** @type {?} */
    var newDayName = dayName.substr(0, 1).toUpperCase() + dayName.substr(1, 1).toLowerCase();
    return newDayName;
}
/**
 * Reorders the array of names so the first index
 * corresponds with the name of the first day of
 * the week.
 * @param {?} dayNames Array with the names of the days
 * of the week.
 * @param {?} firstDayOfWeek First day of the week.
 * @return {?}
 */
function reorderDays(dayNames, firstDayOfWeek) {
    /** @type {?} */
    var dayCount = DAY_NAMES.length;
    /** @type {?} */
    var dayIndex = firstDayOfWeek.valueOf();
    /** @type {?} */
    var reordered = (new Array(dayCount)).fill(0);
    for (var i = 0; i < dayCount; i++) {
        /** @type {?} */
        var newPosition = (i + dayIndex) % dayCount;
        reordered[i] = dayNames[newPosition];
    }
    return reordered;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** *
 * Month calendar provider.
  @type {?} */
var MONTH_CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return MonthCalendarComponent; }),
    multi: true
};
/**
 * Control that represents a calendar.
 */
var MonthCalendarComponent = /** @class */ (function () {
    function MonthCalendarComponent() {
        /**
         * Event raised when the user selects a date.
         */
        this.change = new EventEmitter();
        /**
         * Event raised when the user clicks the calendar.
         */
        this.monthClick = new EventEmitter();
        /**
         * Sets if the control should be in a
         * disabled state.
         */
        this.disabled = false;
        /**
         * Date to show.
         */
        this._value = new Date();
        /**
         * Specifies how a day cell should grow.
         */
        this._grow = { mode: 'stretch' };
        this.defaultFirstDayOfWeek = DayOfWeek.Sunday;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this.defaultFirstDayOfWeek);
        /**
         * First day of the week.
         */
        this._firstDayOfWeek = this.defaultFirstDayOfWeek;
        /**
         * CSS class for the month.
         */
        this.monthClass = 'sc-month';
        /**
         * CSS class for the disabled state.
         */
        this.disabledClass = 'sc-month--disabled';
        /**
         * CSS class for the month caption.
         */
        this.monthCaptionClass = 'sc-month__caption';
        /**
         * CSS class for the day of the week captions.
         */
        this.dayOfWeekCaptionClass = 'sc-month__week-caption';
        /**
         * CSS class for the day captions.
         */
        this.dayCaptionClass = 'sc-month__day';
        /**
         * CSS class for the current day.
         */
        this.currentDayClass = 'sc-month__day--today';
        /**
         * CSS class for the day when the state is disabled.
         */
        this.disabledDayClass = 'sc-month__day--disabled';
        /**
         * CSS class for the selected day.
         */
        this.selectedDayClass = 'sc-month__day--selected';
        this.defaultMonthCaptionFormatter = function (date) { return date.toDateString(); };
        this.defaultDayFormatter = function (day) { return day ? day.day.toString() : ''; };
        this.onChange = function (date) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(MonthCalendarComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.writeValue(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "grow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._grow;
        },
        set: /**
         * @param {?} mode
         * @return {?}
         */
        function (mode) {
            if (mode) {
                this._grow = mode;
            }
            else {
                this._grow = { mode: 'stretch' };
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "firstDayOfWeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._firstDayOfWeek;
        },
        set: /**
         * @param {?} dayOfWeek
         * @return {?}
         */
        function (dayOfWeek) {
            this._firstDayOfWeek = dayOfWeek;
            this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this._firstDayOfWeek);
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "dayFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dayFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._dayFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "dayOfWeekCaptionFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dayOfWeekCaptionFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._dayOfWeekCaptionFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "monthCaptionFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._monthCaptionFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._monthCaptionFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes the component.
     */
    /**
     * Initializes the component.
     * @return {?}
     */
    MonthCalendarComponent.prototype.ngOnInit = /**
     * Initializes the component.
     * @return {?}
     */
    function () {
        this.refresh();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MonthCalendarComponent.prototype.writeValue = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this._value = date;
            this.refresh();
            this.onChange(date);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonthCalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonthCalendarComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MonthCalendarComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Refreshes the component.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refresh = /**
     * Refreshes the component.
     * @return {?}
     */
    function () {
        this.refreshMonthCaption(this.value);
        this.refreshDayOfWeekCaptions();
        this.refreshView(this.value);
    };
    /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshMonthCaption = /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        if (this.monthCaptionFormatter) {
            this.monthCaption = this.monthCaptionFormatter(date);
        }
        else {
            this.monthCaption = this.defaultMonthCaptionFormatter(date);
        }
    };
    /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshDayOfWeekCaptions = /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dayCaptions = [];
        /** @type {?} */
        var dayOfWeekFormatter = this.dayOfWeekCaptionFormatter ?
            this.dayOfWeekCaptionFormatter :
            this.defaultDayOfWeekCaptionFormatter;
        for (var i = 0; i < DAY_NAMES.length; i++) {
            dayCaptions.push(dayOfWeekFormatter(i));
        }
        this.daysOfWeekCaptions = dayCaptions;
    };
    /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshView = /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        this.view = new MonthView(date).createView(false, this.firstDayOfWeek);
    };
    /**
     * Gets the CSS classes to apply to the month.
     */
    /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getClassForMonth = /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classesToApply = this.monthClass;
        if (this.disabled) {
            classesToApply = this.monthClass + ' ' + this.disabledClass;
        }
        return classesToApply;
    };
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param day Day.
     */
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getClassForDay = /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    function (day) {
        /** @type {?} */
        var dayClassToApply = '';
        if (day) {
            if (day.day === this.value.getDate()) {
                dayClassToApply = this.selectedDayClass;
            }
            else if (day.isToday) {
                dayClassToApply = this.currentDayClass;
            }
            else if (this.customDayClass) {
                /** @type {?} */
                var date = new Date(this.value.valueOf());
                date.setDate(day.day);
                dayClassToApply = this.customDayClass(day);
            }
            if (this.disabled) {
                dayClassToApply = dayClassToApply + ' ' + this.disabledDayClass;
            }
            return this.dayCaptionClass + ' ' + dayClassToApply;
        }
        else {
            return this.dayCaptionClass;
        }
    };
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param day Day to format.
     */
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getFormattedDay = /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    function (day) {
        if (this.dayFormatter) {
            return this.dayFormatter(day);
        }
        else {
            return this.defaultDayFormatter(day);
        }
    };
    /**
     * Controls the click event of a day cell.
     * @param dayInfo Info about the selected day.
     */
    /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    MonthCalendarComponent.prototype.onDayClick = /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    function (dayInfo) {
        if (!this.disabled && dayInfo) {
            /** @type {?} */
            var selectedDate = new Date(this.value.valueOf());
            selectedDate.setDate(dayInfo.day);
            this.value = new Date(selectedDate.valueOf());
            this.change.emit(selectedDate);
        }
    };
    /**
     * Controls the click event of the month.
     */
    /**
     * Controls the click event of the month.
     * @return {?}
     */
    MonthCalendarComponent.prototype.onMonthClick = /**
     * Controls the click event of the month.
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.monthClick.emit(this);
        }
    };
    MonthCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sc-month-calendar',
                    template: "<!-- Month -->\n<div (click)=\"onMonthClick()\"\n     [ngClass]=\"['column', grow.mode == 'stretch' ? 'stretch-vertically' : '', getClassForMonth()]\">\n\n  <!-- Month caption -->\n  <div class=\"row\">\n\n    <!-- Month caption cell -->\n    <div class=\"w-100\"\n         [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-height]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\">\n\n      <!-- Month caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"monthTemplate ? monthTemplate : defaultMonthTemplate; context: { $implicit: value }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Week captions -->\n  <div class=\"row\">\n\n    <!-- Week captions cell -->\n    <div [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-square]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\"\n         *ngFor=\"let dayOfWeekCaption of daysOfWeekCaptions; let i = index\">\n\n      <!-- Week caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"dayOfWeekTemplate ? dayOfWeekTemplate : defaultDayOfWeekTemplate; context: { $implicit: dayOfWeekCaption, dayOfWeekIndex: i }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Days -->\n  <div class=\"row\"\n       *ngFor=\"let week of view\">\n\n    <!-- Day cell -->\n    <div (click)=\"onDayClick(day)\"\n         class=\"ratio-square label\"\n         [class.ratio-square]=\"grow.mode == 'proportional' || grow.mode == 'mixed'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch'\"\n         *ngFor=\"let day of week\">\n\n      <!-- Day content -->\n      <div class=\"label__content\">\n\n        <ng-container *ngTemplateOutlet=\"dayTemplate ? dayTemplate : defaultDayTemplate; context: { $implicit: day }\"></ng-container>\n\n      </div>\n\n    </div>\n\n  </div>\n\n</div>\n\n\n\n<!-- Templates -->\n\n<!-- Day template -->\n<ng-template #defaultDayTemplate\n             let-day>\n  <div class=\"flex-expanded-container\">\n    <div [ngClass]=\"['flex-expand', getClassForDay(day)]\">{{ getFormattedDay(day) }}</div>\n  </div>\n</ng-template>\n\n<!-- Day of week cells template -->\n<ng-template #defaultDayOfWeekTemplate\n             let-dayOfWeek\n             let-dayOfWeekIndex=\"dayOfWeekIndex\">\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', dayOfWeekCaptionClass]\">\n      {{ dayOfWeek }}\n    </div>\n  </div>\n</ng-template>\n\n<!-- Month cell template -->\n<ng-template #defaultMonthTemplate\n             let-date>\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', monthCaptionClass]\">\n      {{ monthCaption }}\n    </div>\n  </div>\n</ng-template>\n",
                    styles: [".column{display:flex;flex-flow:column;flex:1}.row{display:flex;flex:1}.label{position:relative}.label__content{position:absolute;top:0;left:0;bottom:0;right:0}.flex-expanded-container{display:flex;position:absolute;width:100%;height:100%}.flex-expand{flex:1}.flex-centered{display:flex;align-items:center;justify-content:center}.ratio-height{padding-bottom:14.28571%}.ratio-square{padding-bottom:14.28571%;width:14.28571%}.stretch-vertically{height:100%}.stretch-horizontally{width:14.28571%}.fixed-height{display:flex;flex:1}.w-100{width:100%}.sc-month{font-size:2rem}.sc-month--disabled{opacity:.25}.sc-month__caption,.sc-month__week-caption{border:1px solid #000;font-weight:700}.sc-month__day{border:1px solid #000;cursor:pointer}.sc-month__day--disabled{cursor:auto}.sc-month__day--today{background:pink}.sc-month__day--selected{background:#6495ed}"],
                    providers: [MONTH_CALENDAR_VALUE_ACCESSOR]
                },] },
    ];
    MonthCalendarComponent.propDecorators = {
        dayTemplate: [{ type: ContentChild, args: [DayTemplateDirective, { read: TemplateRef },] }],
        dayOfWeekTemplate: [{ type: ContentChild, args: [DayOfWeekCaptionTemplateDirective, { read: TemplateRef },] }],
        monthTemplate: [{ type: ContentChild, args: [MonthCaptionTemplateDirective, { read: TemplateRef },] }],
        change: [{ type: Output, args: ['change',] }],
        monthClick: [{ type: Output, args: ['monthClick',] }],
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        grow: [{ type: Input }],
        firstDayOfWeek: [{ type: Input }],
        dayFormatter: [{ type: Input }],
        dayOfWeekCaptionFormatter: [{ type: Input }],
        monthCaptionFormatter: [{ type: Input }],
        customDayClass: [{ type: Input }],
        monthClass: [{ type: Input }],
        disabledClass: [{ type: Input }],
        monthCaptionClass: [{ type: Input }],
        dayOfWeekCaptionClass: [{ type: Input }],
        dayCaptionClass: [{ type: Input }],
        currentDayClass: [{ type: Input }],
        disabledDayClass: [{ type: Input }],
        selectedDayClass: [{ type: Input }]
    };
    return MonthCalendarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Represents information about one
 * day of the month.
 */
var  /**
 * Represents information about one
 * day of the month.
 */
DayInfo = /** @class */ (function () {
    function DayInfo() {
    }
    return DayInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var MonthCalendarModule = /** @class */ (function () {
    function MonthCalendarModule() {
    }
    MonthCalendarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        BrowserModule,
                        FormsModule
                    ],
                    declarations: [
                        MonthCalendarComponent,
                        MonthCaptionTemplateDirective,
                        DayOfWeekCaptionTemplateDirective,
                        DayTemplateDirective
                    ],
                    exports: [
                        MonthCalendarComponent,
                        MonthCaptionTemplateDirective,
                        DayOfWeekCaptionTemplateDirective,
                        DayTemplateDirective
                    ]
                },] },
    ];
    return MonthCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { MONTH_CALENDAR_VALUE_ACCESSOR, MonthCalendarComponent, MonthCaptionTemplateDirective, DayOfWeekCaptionTemplateDirective, DayTemplateDirective, DayInfo, DayOfWeek, MonthCalendarModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,