/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ContentChild, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DAY_NAMES } from '../../models/day-names';
import { MonthView } from '../../models/views/moth-view';
import { DayTemplateDirective } from '../../directives/day-template.directive';
import { DayOfWeekCaptionTemplateDirective } from '../../directives/day-of-week-caption-template.directive';
import { MonthCaptionTemplateDirective } from '../../directives/month-caption-template.directive';
import { DayOfWeek } from '../../models/day-of-week';
import { defaultDayOfWeekCaptionFormatterFactory } from '../../models/formatters/day-of-week-caption-formatter';
/** *
 * Month calendar provider.
  @type {?} */
export const MONTH_CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MonthCalendarComponent),
    multi: true
};
/**
 * Control that represents a calendar.
 */
export class MonthCalendarComponent {
    constructor() {
        /**
         * Event raised when the user selects a date.
         */
        this.change = new EventEmitter();
        /**
         * Event raised when the user clicks the calendar.
         */
        this.monthClick = new EventEmitter();
        /**
         * Sets if the control should be in a
         * disabled state.
         */
        this.disabled = false;
        /**
         * Date to show.
         */
        this._value = new Date();
        /**
         * Specifies how a day cell should grow.
         */
        this._grow = { mode: 'stretch' };
        this.defaultFirstDayOfWeek = DayOfWeek.Sunday;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this.defaultFirstDayOfWeek);
        /**
         * First day of the week.
         */
        this._firstDayOfWeek = this.defaultFirstDayOfWeek;
        /**
         * CSS class for the month.
         */
        this.monthClass = 'sc-month';
        /**
         * CSS class for the disabled state.
         */
        this.disabledClass = 'sc-month--disabled';
        /**
         * CSS class for the month caption.
         */
        this.monthCaptionClass = 'sc-month__caption';
        /**
         * CSS class for the day of the week captions.
         */
        this.dayOfWeekCaptionClass = 'sc-month__week-caption';
        /**
         * CSS class for the day captions.
         */
        this.dayCaptionClass = 'sc-month__day';
        /**
         * CSS class for the current day.
         */
        this.currentDayClass = 'sc-month__day--today';
        /**
         * CSS class for the day when the state is disabled.
         */
        this.disabledDayClass = 'sc-month__day--disabled';
        /**
         * CSS class for the selected day.
         */
        this.selectedDayClass = 'sc-month__day--selected';
        this.defaultMonthCaptionFormatter = (date) => date.toDateString();
        this.defaultDayFormatter = (day) => day ? day.day.toString() : '';
        this.onChange = (date) => { };
        this.onTouched = () => { };
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    set value(date) {
        this.writeValue(date);
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    set grow(mode) {
        if (mode) {
            this._grow = mode;
        }
        else {
            this._grow = { mode: 'stretch' };
        }
    }
    /**
     * @return {?}
     */
    get grow() {
        return this._grow;
    }
    /**
     * @param {?} dayOfWeek
     * @return {?}
     */
    set firstDayOfWeek(dayOfWeek) {
        this._firstDayOfWeek = dayOfWeek;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this._firstDayOfWeek);
        this.refresh();
    }
    /**
     * @return {?}
     */
    get firstDayOfWeek() {
        return this._firstDayOfWeek;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set dayFormatter(formatter) {
        this._dayFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get dayFormatter() {
        return this._dayFormatter;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set dayOfWeekCaptionFormatter(formatter) {
        this._dayOfWeekCaptionFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get dayOfWeekCaptionFormatter() {
        return this._dayOfWeekCaptionFormatter;
    }
    /**
     * @param {?} formatter
     * @return {?}
     */
    set monthCaptionFormatter(formatter) {
        this._monthCaptionFormatter = formatter;
        this.refresh();
    }
    /**
     * @return {?}
     */
    get monthCaptionFormatter() {
        return this._monthCaptionFormatter;
    }
    /**
     * Initializes the component.
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    writeValue(date) {
        if (date) {
            this._value = date;
            this.refresh();
            this.onChange(date);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Refreshes the component.
     * @return {?}
     */
    refresh() {
        this.refreshMonthCaption(this.value);
        this.refreshDayOfWeekCaptions();
        this.refreshView(this.value);
    }
    /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    refreshMonthCaption(date) {
        if (this.monthCaptionFormatter) {
            this.monthCaption = this.monthCaptionFormatter(date);
        }
        else {
            this.monthCaption = this.defaultMonthCaptionFormatter(date);
        }
    }
    /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    refreshDayOfWeekCaptions() {
        /** @type {?} */
        const dayCaptions = [];
        /** @type {?} */
        const dayOfWeekFormatter = this.dayOfWeekCaptionFormatter ?
            this.dayOfWeekCaptionFormatter :
            this.defaultDayOfWeekCaptionFormatter;
        for (let i = 0; i < DAY_NAMES.length; i++) {
            dayCaptions.push(dayOfWeekFormatter(i));
        }
        this.daysOfWeekCaptions = dayCaptions;
    }
    /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    refreshView(date) {
        this.view = new MonthView(date).createView(false, this.firstDayOfWeek);
    }
    /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    getClassForMonth() {
        /** @type {?} */
        let classesToApply = this.monthClass;
        if (this.disabled) {
            classesToApply = this.monthClass + ' ' + this.disabledClass;
        }
        return classesToApply;
    }
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    getClassForDay(day) {
        /** @type {?} */
        let dayClassToApply = '';
        if (day) {
            if (day.day === this.value.getDate()) {
                dayClassToApply = this.selectedDayClass;
            }
            else if (day.isToday) {
                dayClassToApply = this.currentDayClass;
            }
            else if (this.customDayClass) {
                /** @type {?} */
                const date = new Date(this.value.valueOf());
                date.setDate(day.day);
                dayClassToApply = this.customDayClass(day);
            }
            if (this.disabled) {
                dayClassToApply = dayClassToApply + ' ' + this.disabledDayClass;
            }
            return this.dayCaptionClass + ' ' + dayClassToApply;
        }
        else {
            return this.dayCaptionClass;
        }
    }
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    getFormattedDay(day) {
        if (this.dayFormatter) {
            return this.dayFormatter(day);
        }
        else {
            return this.defaultDayFormatter(day);
        }
    }
    /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    onDayClick(dayInfo) {
        if (!this.disabled && dayInfo) {
            /** @type {?} */
            const selectedDate = new Date(this.value.valueOf());
            selectedDate.setDate(dayInfo.day);
            this.value = new Date(selectedDate.valueOf());
            this.change.emit(selectedDate);
        }
    }
    /**
     * Controls the click event of the month.
     * @return {?}
     */
    onMonthClick() {
        if (!this.disabled) {
            this.monthClick.emit(this);
        }
    }
}
MonthCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'sc-month-calendar',
                template: `<!-- Month -->
<div (click)="onMonthClick()"
     [ngClass]="['column', grow.mode == 'stretch' ? 'stretch-vertically' : '', getClassForMonth()]">

  <!-- Month caption -->
  <div class="row">

    <!-- Month caption cell -->
    <div class="w-100"
         [class.label]="grow.mode != 'mixed'"
         [class.ratio-height]="grow.mode == 'proportional'"
         [class.stretch-horizontally]="grow.mode == 'stretch' || grow.mode == 'mixed'">

      <!-- Month caption cell content -->
      <div [class.label__content]="grow.mode != 'mixed'">

        <ng-container *ngTemplateOutlet="monthTemplate ? monthTemplate : defaultMonthTemplate; context: { $implicit: value }"></ng-container>

      </div>
    </div>
  </div>

  <!-- Week captions -->
  <div class="row">

    <!-- Week captions cell -->
    <div [class.label]="grow.mode != 'mixed'"
         [class.ratio-square]="grow.mode == 'proportional'"
         [class.stretch-horizontally]="grow.mode == 'stretch' || grow.mode == 'mixed'"
         *ngFor="let dayOfWeekCaption of daysOfWeekCaptions; let i = index">

      <!-- Week caption cell content -->
      <div [class.label__content]="grow.mode != 'mixed'">

        <ng-container *ngTemplateOutlet="dayOfWeekTemplate ? dayOfWeekTemplate : defaultDayOfWeekTemplate; context: { $implicit: dayOfWeekCaption, dayOfWeekIndex: i }"></ng-container>

      </div>
    </div>
  </div>

  <!-- Days -->
  <div class="row"
       *ngFor="let week of view">

    <!-- Day cell -->
    <div (click)="onDayClick(day)"
         class="ratio-square label"
         [class.ratio-square]="grow.mode == 'proportional' || grow.mode == 'mixed'"
         [class.stretch-horizontally]="grow.mode == 'stretch'"
         *ngFor="let day of week">

      <!-- Day content -->
      <div class="label__content">

        <ng-container *ngTemplateOutlet="dayTemplate ? dayTemplate : defaultDayTemplate; context: { $implicit: day }"></ng-container>

      </div>

    </div>

  </div>

</div>



<!-- Templates -->

<!-- Day template -->
<ng-template #defaultDayTemplate
             let-day>
  <div class="flex-expanded-container">
    <div [ngClass]="['flex-expand', getClassForDay(day)]">{{ getFormattedDay(day) }}</div>
  </div>
</ng-template>

<!-- Day of week cells template -->
<ng-template #defaultDayOfWeekTemplate
             let-dayOfWeek
             let-dayOfWeekIndex="dayOfWeekIndex">
  <div [class.flex-expanded-container]="grow.mode != 'mixed'">
    <div [ngClass]="['flex-expand', 'flex-centered', dayOfWeekCaptionClass]">
      {{ dayOfWeek }}
    </div>
  </div>
</ng-template>

<!-- Month cell template -->
<ng-template #defaultMonthTemplate
             let-date>
  <div [class.flex-expanded-container]="grow.mode != 'mixed'">
    <div [ngClass]="['flex-expand', 'flex-centered', monthCaptionClass]">
      {{ monthCaption }}
    </div>
  </div>
</ng-template>
`,
                styles: [`.column{display:flex;flex-flow:column;flex:1}.row{display:flex;flex:1}.label{position:relative}.label__content{position:absolute;top:0;left:0;bottom:0;right:0}.flex-expanded-container{display:flex;position:absolute;width:100%;height:100%}.flex-expand{flex:1}.flex-centered{display:flex;align-items:center;justify-content:center}.ratio-height{padding-bottom:14.28571%}.ratio-square{padding-bottom:14.28571%;width:14.28571%}.stretch-vertically{height:100%}.stretch-horizontally{width:14.28571%}.fixed-height{display:flex;flex:1}.w-100{width:100%}.sc-month{font-size:2rem}.sc-month--disabled{opacity:.25}.sc-month__caption,.sc-month__week-caption{border:1px solid #000;font-weight:700}.sc-month__day{border:1px solid #000;cursor:pointer}.sc-month__day--disabled{cursor:auto}.sc-month__day--today{background:pink}.sc-month__day--selected{background:#6495ed}`],
                providers: [MONTH_CALENDAR_VALUE_ACCESSOR]
            },] },
];
MonthCalendarComponent.propDecorators = {
    dayTemplate: [{ type: ContentChild, args: [DayTemplateDirective, { read: TemplateRef },] }],
    dayOfWeekTemplate: [{ type: ContentChild, args: [DayOfWeekCaptionTemplateDirective, { read: TemplateRef },] }],
    monthTemplate: [{ type: ContentChild, args: [MonthCaptionTemplateDirective, { read: TemplateRef },] }],
    change: [{ type: Output, args: ['change',] }],
    monthClick: [{ type: Output, args: ['monthClick',] }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    grow: [{ type: Input }],
    firstDayOfWeek: [{ type: Input }],
    dayFormatter: [{ type: Input }],
    dayOfWeekCaptionFormatter: [{ type: Input }],
    monthCaptionFormatter: [{ type: Input }],
    customDayClass: [{ type: Input }],
    monthClass: [{ type: Input }],
    disabledClass: [{ type: Input }],
    monthCaptionClass: [{ type: Input }],
    dayOfWeekCaptionClass: [{ type: Input }],
    dayCaptionClass: [{ type: Input }],
    currentDayClass: [{ type: Input }],
    disabledDayClass: [{ type: Input }],
    selectedDayClass: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MonthCalendarComponent.prototype.dayTemplate;
    /** @type {?} */
    MonthCalendarComponent.prototype.dayOfWeekTemplate;
    /** @type {?} */
    MonthCalendarComponent.prototype.monthTemplate;
    /**
     * Event raised when the user selects a date.
     * @type {?}
     */
    MonthCalendarComponent.prototype.change;
    /**
     * Event raised when the user clicks the calendar.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthClick;
    /**
     * Sets if the control should be in a
     * disabled state.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabled;
    /**
     * Date to show.
     * @type {?}
     */
    MonthCalendarComponent.prototype._value;
    /**
     * Specifies how a day cell should grow.
     * @type {?}
     */
    MonthCalendarComponent.prototype._grow;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultFirstDayOfWeek;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultDayOfWeekCaptionFormatter;
    /**
     * First day of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype._firstDayOfWeek;
    /**
     * Formatter for days.
     * @type {?}
     */
    MonthCalendarComponent.prototype._dayFormatter;
    /**
     * Captions of the different days of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype.daysOfWeekCaptions;
    /**
     * Formatter for the captions of the different
     * days of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype._dayOfWeekCaptionFormatter;
    /**
     * Caption of the month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthCaption;
    /**
     * Formatter for the month caption.
     * @type {?}
     */
    MonthCalendarComponent.prototype._monthCaptionFormatter;
    /**
     * Retrieves a CSS class for the specified day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.customDayClass;
    /**
     * CSS class for the month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthClass;
    /**
     * CSS class for the disabled state.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabledClass;
    /**
     * CSS class for the month caption.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthCaptionClass;
    /**
     * CSS class for the day of the week captions.
     * @type {?}
     */
    MonthCalendarComponent.prototype.dayOfWeekCaptionClass;
    /**
     * CSS class for the day captions.
     * @type {?}
     */
    MonthCalendarComponent.prototype.dayCaptionClass;
    /**
     * CSS class for the current day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.currentDayClass;
    /**
     * CSS class for the day when the state is disabled.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabledDayClass;
    /**
     * CSS class for the selected day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.selectedDayClass;
    /**
     * View of the current month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.view;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultMonthCaptionFormatter;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultDayFormatter;
    /** @type {?} */
    MonthCalendarComponent.prototype.onChange;
    /** @type {?} */
    MonthCalendarComponent.prototype.onTouched;
}

//# sourceMappingURL=data:application/json;base64,