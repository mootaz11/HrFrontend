/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Contains several functions to work with
 * dates in JS.
 */
export class DateMath {
    constructor() { }
    /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    static addDays(date, days) {
        /** @type {?} */
        const daysAdded = new Date(date.valueOf());
        daysAdded.setDate(daysAdded.getDate() + days);
        return daysAdded;
    }
    /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    static substractDays(date, days) {
        return DateMath.addDays(date, -days);
    }
    /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    static addMonths(date, months) {
        /** @type {?} */
        const monthsAdded = new Date(date.valueOf());
        monthsAdded.setMonth(date.getMonth() + months);
        return monthsAdded;
    }
    /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    static substractMonths(date, months) {
        /** @type {?} */
        const monthsSubstracted = new Date(date.valueOf());
        monthsSubstracted.setMonth(date.getMonth() - months);
        return monthsSubstracted;
    }
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    static getFirstDayOfMonth(date) {
        /** @type {?} */
        const firstDay = new Date();
        firstDay.setFullYear(date.getFullYear(), date.getMonth(), 1);
        return firstDay;
    }
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    static getLastDayOfMonth(date) {
        /** @type {?} */
        const lastDay = new Date();
        lastDay.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
        return lastDay;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1tYXRoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2ltcGxlLWFuZ3VsYXItY2FsZW5kYXIvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL2RhdGVzL2RhdGUtbWF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLE1BQU07Ozs7Ozs7OztJQVVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBVSxFQUFFLElBQVk7O1FBQ25DLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxTQUFTLENBQUM7S0FDcEI7Ozs7Ozs7O0lBUUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFVLEVBQUUsSUFBWTtRQUN6QyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4Qzs7Ozs7OztJQU9ELE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBVSxFQUFFLE1BQWM7O1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUM7S0FDcEI7Ozs7Ozs7SUFPRCxNQUFNLENBQUMsZUFBZSxDQUFDLElBQVUsRUFBRSxNQUFjOztRQUMvQyxNQUFNLGlCQUFpQixHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0tBQzFCOzs7Ozs7O0lBT0QsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQVU7O1FBQ2hDLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDNUIsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDbkI7Ozs7Ozs7SUFPRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBVTs7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMzQixPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDbEI7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGFpbnMgc2V2ZXJhbCBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiBkYXRlcyBpbiBKUy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGVNYXRoIHtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBkYXlzIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKiBAcGFyYW0gZGF0ZSBEYXRlIHRoYXQgd2lsbCBiZSBpbmNyZWFzZWQuXG4gICAgICogQHBhcmFtIGRheXMgTnVtYmVyIG9mIGRheXMgdG8gYWRkIHRvIHRoZSBzcGVjaWZpZWRcbiAgICAgKiBkYXRlLlxuICAgICAqL1xuICAgIHN0YXRpYyBhZGREYXlzKGRhdGU6IERhdGUsIGRheXM6IG51bWJlcik6IERhdGUge1xuICAgICAgICBjb25zdCBkYXlzQWRkZWQgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgIGRheXNBZGRlZC5zZXREYXRlKGRheXNBZGRlZC5nZXREYXRlKCkgKyBkYXlzKTtcbiAgICAgICAgcmV0dXJuIGRheXNBZGRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWJzdHJhY3QgZGF5cyB0byB0aGUgc3BlY2lmaWVkIGRhdGUuXG4gICAgICogQHBhcmFtIGRhdGUgRGF0ZSB0aGF0IHdpbGwgYmUgZGVjcmVhc2VkLlxuICAgICAqIEBwYXJhbSBkYXlzIE51bWJlciBvZiBkYXlzIHRvIHN1YnN0cmFjdCBmcm9tXG4gICAgICogdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqL1xuICAgIHN0YXRpYyBzdWJzdHJhY3REYXlzKGRhdGU6IERhdGUsIGRheXM6IG51bWJlcik6IERhdGUge1xuICAgICAgICByZXR1cm4gRGF0ZU1hdGguYWRkRGF5cyhkYXRlLCAtZGF5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG51bWJlciBvZiBtb250aHMgdG8gdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqIEBwYXJhbSBkYXRlIERhdGUgdGhhdCB3aWxsIGJlIGluY3JlYXNlZC5cbiAgICAgKiBAcGFyYW0gbW9udGhzIE1vbnRocyB0byBhZGQuXG4gICAgICovXG4gICAgc3RhdGljIGFkZE1vbnRocyhkYXRlOiBEYXRlLCBtb250aHM6IG51bWJlcik6IERhdGUge1xuICAgICAgY29uc3QgbW9udGhzQWRkZWQgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG4gICAgICBtb250aHNBZGRlZC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBtb250aHMpO1xuICAgICAgcmV0dXJuIG1vbnRoc0FkZGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnN0cmFjdHMgYSBudW1iZXIgb2YgbW9udGhzIGZyb20gdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqIEBwYXJhbSBkYXRlIERhdGUgdGhhdCB3aWxsIGJlIGRlY3JlYXNlZC5cbiAgICAgKiBAcGFyYW0gbW9udGhzIE1vbnRocyB0byBzdWJzdHJhY3QuXG4gICAgICovXG4gICAgc3RhdGljIHN1YnN0cmFjdE1vbnRocyhkYXRlOiBEYXRlLCBtb250aHM6IG51bWJlcik6IERhdGUge1xuICAgICAgY29uc3QgbW9udGhzU3Vic3RyYWN0ZWQgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG4gICAgICBtb250aHNTdWJzdHJhY3RlZC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgLSBtb250aHMpO1xuICAgICAgcmV0dXJuIG1vbnRoc1N1YnN0cmFjdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGUgY29ycmVzcG9uZGluZyB0byB0aGUgZmlyc3QgZGF5XG4gICAgICogb2YgdGhlIG1vbnRoIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKiBAcGFyYW0gZGF0ZSBEYXRlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRGaXJzdERheU9mTW9udGgoZGF0ZTogRGF0ZSk6IERhdGUge1xuICAgICAgICBjb25zdCBmaXJzdERheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGZpcnN0RGF5LnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCAxKTtcbiAgICAgICAgcmV0dXJuIGZpcnN0RGF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGUgY29ycmVzcG9uZGluZyB0byB0aGUgbGFzdCBkYXlcbiAgICAgKiBvZiB0aGUgbW9udGggb2YgdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqIEBwYXJhbSBkYXRlIERhdGUuXG4gICAgICovXG4gICAgc3RhdGljIGdldExhc3REYXlPZk1vbnRoKGRhdGU6IERhdGUpOiBEYXRlIHtcbiAgICAgICAgY29uc3QgbGFzdERheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxhc3REYXkuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkgKyAxLCAwKTtcbiAgICAgICAgcmV0dXJuIGxhc3REYXk7XG4gICAgfVxufVxuIl19