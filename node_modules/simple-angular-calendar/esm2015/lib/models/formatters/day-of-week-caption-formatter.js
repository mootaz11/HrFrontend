/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DAY_NAMES } from '../day-names';
/**
 * Default formatter for the captions of the days
 * of the week.
 * @param {?} firstDayOfWeek
 * @return {?}
 */
export function defaultDayOfWeekCaptionFormatterFactory(firstDayOfWeek) {
    return (dayOfWeek) => {
        /** @type {?} */
        const formattedDayNames = DAY_NAMES.map(dayName => formatDayName(dayName));
        /** @type {?} */
        const reordered = reorderDays(formattedDayNames, firstDayOfWeek);
        return reordered[dayOfWeek.valueOf()];
    };
}
/**
 * Applies formatting to the name of the day.
 * @param {?} dayName Name of the day.
 * @return {?}
 */
function formatDayName(dayName) {
    /** @type {?} */
    const newDayName = dayName.substr(0, 1).toUpperCase() + dayName.substr(1, 1).toLowerCase();
    return newDayName;
}
/**
 * Reorders the array of names so the first index
 * corresponds with the name of the first day of
 * the week.
 * @param {?} dayNames Array with the names of the days
 * of the week.
 * @param {?} firstDayOfWeek First day of the week.
 * @return {?}
 */
function reorderDays(dayNames, firstDayOfWeek) {
    /** @type {?} */
    const dayCount = DAY_NAMES.length;
    /** @type {?} */
    const dayIndex = firstDayOfWeek.valueOf();
    /** @type {?} */
    const reordered = (new Array(dayCount)).fill(0);
    for (let i = 0; i < dayCount; i++) {
        /** @type {?} */
        const newPosition = (i + dayIndex) % dayCount;
        reordered[i] = dayNames[newPosition];
    }
    return reordered;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LW9mLXdlZWstY2FwdGlvbi1mb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaW1wbGUtYW5ndWxhci1jYWxlbmRhci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvZm9ybWF0dGVycy9kYXktb2Ytd2Vlay1jYXB0aW9uLWZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7Ozs7OztBQVF6QyxNQUFNLGtEQUFrRCxjQUF5QjtJQUMvRSxNQUFNLENBQUMsQ0FBQyxTQUFvQixFQUFFLEVBQUU7O1FBQzlCLE1BQU0saUJBQWlCLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FDckMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQ2xDLENBQUM7O1FBRUYsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDdkMsQ0FBQztDQUNIOzs7Ozs7QUFNRCx1QkFBdUIsT0FBZTs7SUFDcEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0YsTUFBTSxDQUFDLFVBQVUsQ0FBQztDQUNuQjs7Ozs7Ozs7OztBQVVELHFCQUFxQixRQUFrQixFQUFFLGNBQXlCOztJQUNoRSxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDOztJQUVsQyxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7O0lBQzFDLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7UUFDbEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQzlDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDdEM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDO0NBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREFZX05BTUVTIH0gZnJvbSAnLi4vZGF5LW5hbWVzJztcbmltcG9ydCB7IERheU9mV2VlayB9IGZyb20gJy4uL2RheS1vZi13ZWVrJztcblxuLyoqXG4gKiBEZWZhdWx0IGZvcm1hdHRlciBmb3IgdGhlIGNhcHRpb25zIG9mIHRoZSBkYXlzXG4gKiBvZiB0aGUgd2Vlay5cbiAqIEBwYXJhbSBkYXlPZldlZWsgRGF5IG9mIHRoZSB3ZWVrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdERheU9mV2Vla0NhcHRpb25Gb3JtYXR0ZXJGYWN0b3J5KGZpcnN0RGF5T2ZXZWVrOiBEYXlPZldlZWspOiAoZGF5T2ZXZWVrOiBEYXlPZldlZWspID0+IHN0cmluZyB7XG4gIHJldHVybiAoZGF5T2ZXZWVrOiBEYXlPZldlZWspID0+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXlOYW1lcyA9IERBWV9OQU1FUy5tYXAoXG4gICAgICBkYXlOYW1lID0+IGZvcm1hdERheU5hbWUoZGF5TmFtZSlcbiAgICApO1xuXG4gICAgY29uc3QgcmVvcmRlcmVkID0gcmVvcmRlckRheXMoZm9ybWF0dGVkRGF5TmFtZXMsIGZpcnN0RGF5T2ZXZWVrKTtcbiAgICByZXR1cm4gcmVvcmRlcmVkW2RheU9mV2Vlay52YWx1ZU9mKCldO1xuICB9O1xufVxuXG4vKipcbiAqIEFwcGxpZXMgZm9ybWF0dGluZyB0byB0aGUgbmFtZSBvZiB0aGUgZGF5LlxuICogQHBhcmFtIGRheU5hbWUgTmFtZSBvZiB0aGUgZGF5LlxuICovXG5mdW5jdGlvbiBmb3JtYXREYXlOYW1lKGRheU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IG5ld0RheU5hbWUgPSBkYXlOYW1lLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgZGF5TmFtZS5zdWJzdHIoMSwgMSkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5ld0RheU5hbWU7XG59XG5cbi8qKlxuICogUmVvcmRlcnMgdGhlIGFycmF5IG9mIG5hbWVzIHNvIHRoZSBmaXJzdCBpbmRleFxuICogY29ycmVzcG9uZHMgd2l0aCB0aGUgbmFtZSBvZiB0aGUgZmlyc3QgZGF5IG9mXG4gKiB0aGUgd2Vlay5cbiAqIEBwYXJhbSBkYXlOYW1lcyBBcnJheSB3aXRoIHRoZSBuYW1lcyBvZiB0aGUgZGF5c1xuICogb2YgdGhlIHdlZWsuXG4gKiBAcGFyYW0gZmlyc3REYXlPZldlZWsgRmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICovXG5mdW5jdGlvbiByZW9yZGVyRGF5cyhkYXlOYW1lczogc3RyaW5nW10sIGZpcnN0RGF5T2ZXZWVrOiBEYXlPZldlZWspOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGRheUNvdW50ID0gREFZX05BTUVTLmxlbmd0aDtcblxuICBjb25zdCBkYXlJbmRleCA9IGZpcnN0RGF5T2ZXZWVrLnZhbHVlT2YoKTtcbiAgY29uc3QgcmVvcmRlcmVkID0gKG5ldyBBcnJheShkYXlDb3VudCkpLmZpbGwoMCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5Q291bnQ7IGkrKykge1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gKGkgKyBkYXlJbmRleCkgJSBkYXlDb3VudDtcbiAgICByZW9yZGVyZWRbaV0gPSBkYXlOYW1lc1tuZXdQb3NpdGlvbl07XG4gIH1cblxuICByZXR1cm4gcmVvcmRlcmVkO1xufVxuIl19