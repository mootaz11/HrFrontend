/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, forwardRef, Input, Output, ContentChild, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DAY_NAMES } from '../../models/day-names';
import { MonthView } from '../../models/views/moth-view';
import { DayTemplateDirective } from '../../directives/day-template.directive';
import { DayOfWeekCaptionTemplateDirective } from '../../directives/day-of-week-caption-template.directive';
import { MonthCaptionTemplateDirective } from '../../directives/month-caption-template.directive';
import { DayOfWeek } from '../../models/day-of-week';
import { defaultDayOfWeekCaptionFormatterFactory } from '../../models/formatters/day-of-week-caption-formatter';
/** *
 * Month calendar provider.
  @type {?} */
export var MONTH_CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return MonthCalendarComponent; }),
    multi: true
};
/**
 * Control that represents a calendar.
 */
var MonthCalendarComponent = /** @class */ (function () {
    function MonthCalendarComponent() {
        /**
         * Event raised when the user selects a date.
         */
        this.change = new EventEmitter();
        /**
         * Event raised when the user clicks the calendar.
         */
        this.monthClick = new EventEmitter();
        /**
         * Sets if the control should be in a
         * disabled state.
         */
        this.disabled = false;
        /**
         * Date to show.
         */
        this._value = new Date();
        /**
         * Specifies how a day cell should grow.
         */
        this._grow = { mode: 'stretch' };
        this.defaultFirstDayOfWeek = DayOfWeek.Sunday;
        this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this.defaultFirstDayOfWeek);
        /**
         * First day of the week.
         */
        this._firstDayOfWeek = this.defaultFirstDayOfWeek;
        /**
         * CSS class for the month.
         */
        this.monthClass = 'sc-month';
        /**
         * CSS class for the disabled state.
         */
        this.disabledClass = 'sc-month--disabled';
        /**
         * CSS class for the month caption.
         */
        this.monthCaptionClass = 'sc-month__caption';
        /**
         * CSS class for the day of the week captions.
         */
        this.dayOfWeekCaptionClass = 'sc-month__week-caption';
        /**
         * CSS class for the day captions.
         */
        this.dayCaptionClass = 'sc-month__day';
        /**
         * CSS class for the current day.
         */
        this.currentDayClass = 'sc-month__day--today';
        /**
         * CSS class for the day when the state is disabled.
         */
        this.disabledDayClass = 'sc-month__day--disabled';
        /**
         * CSS class for the selected day.
         */
        this.selectedDayClass = 'sc-month__day--selected';
        this.defaultMonthCaptionFormatter = function (date) { return date.toDateString(); };
        this.defaultDayFormatter = function (day) { return day ? day.day.toString() : ''; };
        this.onChange = function (date) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(MonthCalendarComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this.writeValue(date);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "grow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._grow;
        },
        set: /**
         * @param {?} mode
         * @return {?}
         */
        function (mode) {
            if (mode) {
                this._grow = mode;
            }
            else {
                this._grow = { mode: 'stretch' };
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "firstDayOfWeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._firstDayOfWeek;
        },
        set: /**
         * @param {?} dayOfWeek
         * @return {?}
         */
        function (dayOfWeek) {
            this._firstDayOfWeek = dayOfWeek;
            this.defaultDayOfWeekCaptionFormatter = defaultDayOfWeekCaptionFormatterFactory(this._firstDayOfWeek);
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "dayFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dayFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._dayFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "dayOfWeekCaptionFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dayOfWeekCaptionFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._dayOfWeekCaptionFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MonthCalendarComponent.prototype, "monthCaptionFormatter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._monthCaptionFormatter;
        },
        set: /**
         * @param {?} formatter
         * @return {?}
         */
        function (formatter) {
            this._monthCaptionFormatter = formatter;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes the component.
     */
    /**
     * Initializes the component.
     * @return {?}
     */
    MonthCalendarComponent.prototype.ngOnInit = /**
     * Initializes the component.
     * @return {?}
     */
    function () {
        this.refresh();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MonthCalendarComponent.prototype.writeValue = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this._value = date;
            this.refresh();
            this.onChange(date);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonthCalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonthCalendarComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    MonthCalendarComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Refreshes the component.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refresh = /**
     * Refreshes the component.
     * @return {?}
     */
    function () {
        this.refreshMonthCaption(this.value);
        this.refreshDayOfWeekCaptions();
        this.refreshView(this.value);
    };
    /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshMonthCaption = /**
     * Refreshes the month caption.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        if (this.monthCaptionFormatter) {
            this.monthCaption = this.monthCaptionFormatter(date);
        }
        else {
            this.monthCaption = this.defaultMonthCaptionFormatter(date);
        }
    };
    /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshDayOfWeekCaptions = /**
     * Refreshes the day of week captions.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dayCaptions = [];
        /** @type {?} */
        var dayOfWeekFormatter = this.dayOfWeekCaptionFormatter ?
            this.dayOfWeekCaptionFormatter :
            this.defaultDayOfWeekCaptionFormatter;
        for (var i = 0; i < DAY_NAMES.length; i++) {
            dayCaptions.push(dayOfWeekFormatter(i));
        }
        this.daysOfWeekCaptions = dayCaptions;
    };
    /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    MonthCalendarComponent.prototype.refreshView = /**
     * Refreshes the calendar view.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        this.view = new MonthView(date).createView(false, this.firstDayOfWeek);
    };
    /**
     * Gets the CSS classes to apply to the month.
     */
    /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getClassForMonth = /**
     * Gets the CSS classes to apply to the month.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classesToApply = this.monthClass;
        if (this.disabled) {
            classesToApply = this.monthClass + ' ' + this.disabledClass;
        }
        return classesToApply;
    };
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param day Day.
     */
    /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getClassForDay = /**
     * Gets the CSS class applicable to
     * the specified day.
     * @param {?=} day Day.
     * @return {?}
     */
    function (day) {
        /** @type {?} */
        var dayClassToApply = '';
        if (day) {
            if (day.day === this.value.getDate()) {
                dayClassToApply = this.selectedDayClass;
            }
            else if (day.isToday) {
                dayClassToApply = this.currentDayClass;
            }
            else if (this.customDayClass) {
                /** @type {?} */
                var date = new Date(this.value.valueOf());
                date.setDate(day.day);
                dayClassToApply = this.customDayClass(day);
            }
            if (this.disabled) {
                dayClassToApply = dayClassToApply + ' ' + this.disabledDayClass;
            }
            return this.dayCaptionClass + ' ' + dayClassToApply;
        }
        else {
            return this.dayCaptionClass;
        }
    };
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param day Day to format.
     */
    /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    MonthCalendarComponent.prototype.getFormattedDay = /**
     * Gets a formatted string corresponding
     * to the specified day.
     * @param {?} day Day to format.
     * @return {?}
     */
    function (day) {
        if (this.dayFormatter) {
            return this.dayFormatter(day);
        }
        else {
            return this.defaultDayFormatter(day);
        }
    };
    /**
     * Controls the click event of a day cell.
     * @param dayInfo Info about the selected day.
     */
    /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    MonthCalendarComponent.prototype.onDayClick = /**
     * Controls the click event of a day cell.
     * @param {?} dayInfo Info about the selected day.
     * @return {?}
     */
    function (dayInfo) {
        if (!this.disabled && dayInfo) {
            /** @type {?} */
            var selectedDate = new Date(this.value.valueOf());
            selectedDate.setDate(dayInfo.day);
            this.value = new Date(selectedDate.valueOf());
            this.change.emit(selectedDate);
        }
    };
    /**
     * Controls the click event of the month.
     */
    /**
     * Controls the click event of the month.
     * @return {?}
     */
    MonthCalendarComponent.prototype.onMonthClick = /**
     * Controls the click event of the month.
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.monthClick.emit(this);
        }
    };
    MonthCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sc-month-calendar',
                    template: "<!-- Month -->\n<div (click)=\"onMonthClick()\"\n     [ngClass]=\"['column', grow.mode == 'stretch' ? 'stretch-vertically' : '', getClassForMonth()]\">\n\n  <!-- Month caption -->\n  <div class=\"row\">\n\n    <!-- Month caption cell -->\n    <div class=\"w-100\"\n         [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-height]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\">\n\n      <!-- Month caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"monthTemplate ? monthTemplate : defaultMonthTemplate; context: { $implicit: value }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Week captions -->\n  <div class=\"row\">\n\n    <!-- Week captions cell -->\n    <div [class.label]=\"grow.mode != 'mixed'\"\n         [class.ratio-square]=\"grow.mode == 'proportional'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch' || grow.mode == 'mixed'\"\n         *ngFor=\"let dayOfWeekCaption of daysOfWeekCaptions; let i = index\">\n\n      <!-- Week caption cell content -->\n      <div [class.label__content]=\"grow.mode != 'mixed'\">\n\n        <ng-container *ngTemplateOutlet=\"dayOfWeekTemplate ? dayOfWeekTemplate : defaultDayOfWeekTemplate; context: { $implicit: dayOfWeekCaption, dayOfWeekIndex: i }\"></ng-container>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- Days -->\n  <div class=\"row\"\n       *ngFor=\"let week of view\">\n\n    <!-- Day cell -->\n    <div (click)=\"onDayClick(day)\"\n         class=\"ratio-square label\"\n         [class.ratio-square]=\"grow.mode == 'proportional' || grow.mode == 'mixed'\"\n         [class.stretch-horizontally]=\"grow.mode == 'stretch'\"\n         *ngFor=\"let day of week\">\n\n      <!-- Day content -->\n      <div class=\"label__content\">\n\n        <ng-container *ngTemplateOutlet=\"dayTemplate ? dayTemplate : defaultDayTemplate; context: { $implicit: day }\"></ng-container>\n\n      </div>\n\n    </div>\n\n  </div>\n\n</div>\n\n\n\n<!-- Templates -->\n\n<!-- Day template -->\n<ng-template #defaultDayTemplate\n             let-day>\n  <div class=\"flex-expanded-container\">\n    <div [ngClass]=\"['flex-expand', getClassForDay(day)]\">{{ getFormattedDay(day) }}</div>\n  </div>\n</ng-template>\n\n<!-- Day of week cells template -->\n<ng-template #defaultDayOfWeekTemplate\n             let-dayOfWeek\n             let-dayOfWeekIndex=\"dayOfWeekIndex\">\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', dayOfWeekCaptionClass]\">\n      {{ dayOfWeek }}\n    </div>\n  </div>\n</ng-template>\n\n<!-- Month cell template -->\n<ng-template #defaultMonthTemplate\n             let-date>\n  <div [class.flex-expanded-container]=\"grow.mode != 'mixed'\">\n    <div [ngClass]=\"['flex-expand', 'flex-centered', monthCaptionClass]\">\n      {{ monthCaption }}\n    </div>\n  </div>\n</ng-template>\n",
                    styles: [".column{display:flex;flex-flow:column;flex:1}.row{display:flex;flex:1}.label{position:relative}.label__content{position:absolute;top:0;left:0;bottom:0;right:0}.flex-expanded-container{display:flex;position:absolute;width:100%;height:100%}.flex-expand{flex:1}.flex-centered{display:flex;align-items:center;justify-content:center}.ratio-height{padding-bottom:14.28571%}.ratio-square{padding-bottom:14.28571%;width:14.28571%}.stretch-vertically{height:100%}.stretch-horizontally{width:14.28571%}.fixed-height{display:flex;flex:1}.w-100{width:100%}.sc-month{font-size:2rem}.sc-month--disabled{opacity:.25}.sc-month__caption,.sc-month__week-caption{border:1px solid #000;font-weight:700}.sc-month__day{border:1px solid #000;cursor:pointer}.sc-month__day--disabled{cursor:auto}.sc-month__day--today{background:pink}.sc-month__day--selected{background:#6495ed}"],
                    providers: [MONTH_CALENDAR_VALUE_ACCESSOR]
                },] },
    ];
    MonthCalendarComponent.propDecorators = {
        dayTemplate: [{ type: ContentChild, args: [DayTemplateDirective, { read: TemplateRef },] }],
        dayOfWeekTemplate: [{ type: ContentChild, args: [DayOfWeekCaptionTemplateDirective, { read: TemplateRef },] }],
        monthTemplate: [{ type: ContentChild, args: [MonthCaptionTemplateDirective, { read: TemplateRef },] }],
        change: [{ type: Output, args: ['change',] }],
        monthClick: [{ type: Output, args: ['monthClick',] }],
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        grow: [{ type: Input }],
        firstDayOfWeek: [{ type: Input }],
        dayFormatter: [{ type: Input }],
        dayOfWeekCaptionFormatter: [{ type: Input }],
        monthCaptionFormatter: [{ type: Input }],
        customDayClass: [{ type: Input }],
        monthClass: [{ type: Input }],
        disabledClass: [{ type: Input }],
        monthCaptionClass: [{ type: Input }],
        dayOfWeekCaptionClass: [{ type: Input }],
        dayCaptionClass: [{ type: Input }],
        currentDayClass: [{ type: Input }],
        disabledDayClass: [{ type: Input }],
        selectedDayClass: [{ type: Input }]
    };
    return MonthCalendarComponent;
}());
export { MonthCalendarComponent };
if (false) {
    /** @type {?} */
    MonthCalendarComponent.prototype.dayTemplate;
    /** @type {?} */
    MonthCalendarComponent.prototype.dayOfWeekTemplate;
    /** @type {?} */
    MonthCalendarComponent.prototype.monthTemplate;
    /**
     * Event raised when the user selects a date.
     * @type {?}
     */
    MonthCalendarComponent.prototype.change;
    /**
     * Event raised when the user clicks the calendar.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthClick;
    /**
     * Sets if the control should be in a
     * disabled state.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabled;
    /**
     * Date to show.
     * @type {?}
     */
    MonthCalendarComponent.prototype._value;
    /**
     * Specifies how a day cell should grow.
     * @type {?}
     */
    MonthCalendarComponent.prototype._grow;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultFirstDayOfWeek;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultDayOfWeekCaptionFormatter;
    /**
     * First day of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype._firstDayOfWeek;
    /**
     * Formatter for days.
     * @type {?}
     */
    MonthCalendarComponent.prototype._dayFormatter;
    /**
     * Captions of the different days of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype.daysOfWeekCaptions;
    /**
     * Formatter for the captions of the different
     * days of the week.
     * @type {?}
     */
    MonthCalendarComponent.prototype._dayOfWeekCaptionFormatter;
    /**
     * Caption of the month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthCaption;
    /**
     * Formatter for the month caption.
     * @type {?}
     */
    MonthCalendarComponent.prototype._monthCaptionFormatter;
    /**
     * Retrieves a CSS class for the specified day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.customDayClass;
    /**
     * CSS class for the month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthClass;
    /**
     * CSS class for the disabled state.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabledClass;
    /**
     * CSS class for the month caption.
     * @type {?}
     */
    MonthCalendarComponent.prototype.monthCaptionClass;
    /**
     * CSS class for the day of the week captions.
     * @type {?}
     */
    MonthCalendarComponent.prototype.dayOfWeekCaptionClass;
    /**
     * CSS class for the day captions.
     * @type {?}
     */
    MonthCalendarComponent.prototype.dayCaptionClass;
    /**
     * CSS class for the current day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.currentDayClass;
    /**
     * CSS class for the day when the state is disabled.
     * @type {?}
     */
    MonthCalendarComponent.prototype.disabledDayClass;
    /**
     * CSS class for the selected day.
     * @type {?}
     */
    MonthCalendarComponent.prototype.selectedDayClass;
    /**
     * View of the current month.
     * @type {?}
     */
    MonthCalendarComponent.prototype.view;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultMonthCaptionFormatter;
    /** @type {?} */
    MonthCalendarComponent.prototype.defaultDayFormatter;
    /** @type {?} */
    MonthCalendarComponent.prototype.onChange;
    /** @type {?} */
    MonthCalendarComponent.prototype.onTouched;
}

//# sourceMappingURL=data:application/json;base64,