/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Contains several functions to work with
 * dates in JS.
 */
var /**
 * Contains several functions to work with
 * dates in JS.
 */
DateMath = /** @class */ (function () {
    function DateMath() {
    }
    /**
     * Adds days to the specified date.
     * @param date Date that will be increased.
     * @param days Number of days to add to the specified
     * date.
     */
    /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    DateMath.addDays = /**
     * Adds days to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} days Number of days to add to the specified
     * date.
     * @return {?}
     */
    function (date, days) {
        /** @type {?} */
        var daysAdded = new Date(date.valueOf());
        daysAdded.setDate(daysAdded.getDate() + days);
        return daysAdded;
    };
    /**
     * Substract days to the specified date.
     * @param date Date that will be decreased.
     * @param days Number of days to substract from
     * the specified date.
     */
    /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    DateMath.substractDays = /**
     * Substract days to the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} days Number of days to substract from
     * the specified date.
     * @return {?}
     */
    function (date, days) {
        return DateMath.addDays(date, -days);
    };
    /**
     * Adds a number of months to the specified date.
     * @param date Date that will be increased.
     * @param months Months to add.
     */
    /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    DateMath.addMonths = /**
     * Adds a number of months to the specified date.
     * @param {?} date Date that will be increased.
     * @param {?} months Months to add.
     * @return {?}
     */
    function (date, months) {
        /** @type {?} */
        var monthsAdded = new Date(date.valueOf());
        monthsAdded.setMonth(date.getMonth() + months);
        return monthsAdded;
    };
    /**
     * Substracts a number of months from the specified date.
     * @param date Date that will be decreased.
     * @param months Months to substract.
     */
    /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    DateMath.substractMonths = /**
     * Substracts a number of months from the specified date.
     * @param {?} date Date that will be decreased.
     * @param {?} months Months to substract.
     * @return {?}
     */
    function (date, months) {
        /** @type {?} */
        var monthsSubstracted = new Date(date.valueOf());
        monthsSubstracted.setMonth(date.getMonth() - months);
        return monthsSubstracted;
    };
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param date Date.
     */
    /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    DateMath.getFirstDayOfMonth = /**
     * Gets the date corresponding to the first day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var firstDay = new Date();
        firstDay.setFullYear(date.getFullYear(), date.getMonth(), 1);
        return firstDay;
    };
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param date Date.
     */
    /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    DateMath.getLastDayOfMonth = /**
     * Gets the date corresponding to the last day
     * of the month of the specified date.
     * @param {?} date Date.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var lastDay = new Date();
        lastDay.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);
        return lastDay;
    };
    return DateMath;
}());
/**
 * Contains several functions to work with
 * dates in JS.
 */
export { DateMath };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1tYXRoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2ltcGxlLWFuZ3VsYXItY2FsZW5kYXIvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL2RhdGVzL2RhdGUtbWF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBOzs7O0FBQUE7OztJQUlJOzs7OztPQUtHOzs7Ozs7OztJQUNJLGdCQUFPOzs7Ozs7O0lBQWQsVUFBZSxJQUFVLEVBQUUsSUFBWTs7UUFDbkMsSUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0MsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztLQUNwQjtJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNJLHNCQUFhOzs7Ozs7O0lBQXBCLFVBQXFCLElBQVUsRUFBRSxJQUFZO1FBQ3pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNJLGtCQUFTOzs7Ozs7SUFBaEIsVUFBaUIsSUFBVSxFQUFFLE1BQWM7O1FBQ3pDLElBQU0sV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUM7S0FDcEI7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0ksd0JBQWU7Ozs7OztJQUF0QixVQUF1QixJQUFVLEVBQUUsTUFBYzs7UUFDL0MsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNuRCxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztLQUMxQjtJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSSwyQkFBa0I7Ozs7OztJQUF6QixVQUEwQixJQUFVOztRQUNoQyxJQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ25CO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNJLDBCQUFpQjs7Ozs7O0lBQXhCLFVBQXlCLElBQVU7O1FBQy9CLElBQU0sT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDM0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ2xCO21CQXhFTDtJQXlFQyxDQUFBOzs7OztBQXJFRCxvQkFxRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRhaW5zIHNldmVyYWwgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICogZGF0ZXMgaW4gSlMuXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRlTWF0aCB7XG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cblxuICAgIC8qKlxuICAgICAqIEFkZHMgZGF5cyB0byB0aGUgc3BlY2lmaWVkIGRhdGUuXG4gICAgICogQHBhcmFtIGRhdGUgRGF0ZSB0aGF0IHdpbGwgYmUgaW5jcmVhc2VkLlxuICAgICAqIEBwYXJhbSBkYXlzIE51bWJlciBvZiBkYXlzIHRvIGFkZCB0byB0aGUgc3BlY2lmaWVkXG4gICAgICogZGF0ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgYWRkRGF5cyhkYXRlOiBEYXRlLCBkYXlzOiBudW1iZXIpOiBEYXRlIHtcbiAgICAgICAgY29uc3QgZGF5c0FkZGVkID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xuICAgICAgICBkYXlzQWRkZWQuc2V0RGF0ZShkYXlzQWRkZWQuZ2V0RGF0ZSgpICsgZGF5cyk7XG4gICAgICAgIHJldHVybiBkYXlzQWRkZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3Vic3RyYWN0IGRheXMgdG8gdGhlIHNwZWNpZmllZCBkYXRlLlxuICAgICAqIEBwYXJhbSBkYXRlIERhdGUgdGhhdCB3aWxsIGJlIGRlY3JlYXNlZC5cbiAgICAgKiBAcGFyYW0gZGF5cyBOdW1iZXIgb2YgZGF5cyB0byBzdWJzdHJhY3QgZnJvbVxuICAgICAqIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgc3Vic3RyYWN0RGF5cyhkYXRlOiBEYXRlLCBkYXlzOiBudW1iZXIpOiBEYXRlIHtcbiAgICAgICAgcmV0dXJuIERhdGVNYXRoLmFkZERheXMoZGF0ZSwgLWRheXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKiBAcGFyYW0gZGF0ZSBEYXRlIHRoYXQgd2lsbCBiZSBpbmNyZWFzZWQuXG4gICAgICogQHBhcmFtIG1vbnRocyBNb250aHMgdG8gYWRkLlxuICAgICAqL1xuICAgIHN0YXRpYyBhZGRNb250aHMoZGF0ZTogRGF0ZSwgbW9udGhzOiBudW1iZXIpOiBEYXRlIHtcbiAgICAgIGNvbnN0IG1vbnRoc0FkZGVkID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xuICAgICAgbW9udGhzQWRkZWQuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgbW9udGhzKTtcbiAgICAgIHJldHVybiBtb250aHNBZGRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWJzdHJhY3RzIGEgbnVtYmVyIG9mIG1vbnRocyBmcm9tIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKiBAcGFyYW0gZGF0ZSBEYXRlIHRoYXQgd2lsbCBiZSBkZWNyZWFzZWQuXG4gICAgICogQHBhcmFtIG1vbnRocyBNb250aHMgdG8gc3Vic3RyYWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBzdWJzdHJhY3RNb250aHMoZGF0ZTogRGF0ZSwgbW9udGhzOiBudW1iZXIpOiBEYXRlIHtcbiAgICAgIGNvbnN0IG1vbnRoc1N1YnN0cmFjdGVkID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xuICAgICAgbW9udGhzU3Vic3RyYWN0ZWQuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpIC0gbW9udGhzKTtcbiAgICAgIHJldHVybiBtb250aHNTdWJzdHJhY3RlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGZpcnN0IGRheVxuICAgICAqIG9mIHRoZSBtb250aCBvZiB0aGUgc3BlY2lmaWVkIGRhdGUuXG4gICAgICogQHBhcmFtIGRhdGUgRGF0ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Rmlyc3REYXlPZk1vbnRoKGRhdGU6IERhdGUpOiBEYXRlIHtcbiAgICAgICAgY29uc3QgZmlyc3REYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBmaXJzdERheS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgMSk7XG4gICAgICAgIHJldHVybiBmaXJzdERheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxhc3QgZGF5XG4gICAgICogb2YgdGhlIG1vbnRoIG9mIHRoZSBzcGVjaWZpZWQgZGF0ZS5cbiAgICAgKiBAcGFyYW0gZGF0ZSBEYXRlLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRMYXN0RGF5T2ZNb250aChkYXRlOiBEYXRlKTogRGF0ZSB7XG4gICAgICAgIGNvbnN0IGxhc3REYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsYXN0RGF5LnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCk7XG4gICAgICAgIHJldHVybiBsYXN0RGF5O1xuICAgIH1cbn1cbiJdfQ==