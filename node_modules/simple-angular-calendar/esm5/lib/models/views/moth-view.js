/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DayOfWeek } from '../day-of-week';
import { DateMath } from '../dates/date-math';
/**
 * Creates a view of a month.
 */
var /**
 * Creates a view of a month.
 */
MonthView = /** @class */ (function () {
    /**
     * Creates a new instance of MonthView.
     * @param date Date of the month.
     */
    function MonthView(date) {
        this.date = date;
        this.WEEKS_PER_MONTH = 5;
        this.DAYS_PER_WEEK = 7;
    }
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param weekStart Day of week to be considered the beginning
     * of the week.
     */
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?=} completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param {?=} weekStart Day of week to be considered the beginning
     * of the week.
     * @return {?}
     */
    MonthView.prototype.createView = /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?=} completeHoles Indicates if the beginning and end
     * of the grid should be completed with the days of the
     * adjacent months.
     * @param {?=} weekStart Day of week to be considered the beginning
     * of the week.
     * @return {?}
     */
    function (completeHoles, weekStart) {
        if (completeHoles === void 0) { completeHoles = false; }
        if (weekStart === void 0) { weekStart = DayOfWeek.Monday; }
        /** @type {?} */
        var currentMonthGrid = this.createGrid(this.date, weekStart);
        if (completeHoles) {
            /** @type {?} */
            var needsToBeFilledFromBeginning = !!!currentMonthGrid[0][0];
            if (needsToBeFilledFromBeginning) {
                /** @type {?} */
                var lastMonth = DateMath.substractMonths(this.date, 1);
                /** @type {?} */
                var lastDayOfLastMonth = DateMath.getLastDayOfMonth(lastMonth).getDate();
                /** @type {?} */
                var firstDayOfCurrentMonth = DateMath.getFirstDayOfMonth(this.date);
                /** @type {?} */
                var daysToPickFromLastMonth = firstDayOfCurrentMonth.getDay() - weekStart.valueOf();
                for (var i = 0; i < daysToPickFromLastMonth; i++) {
                    /** @type {?} */
                    var currentDayOfMonth = lastDayOfLastMonth - (daysToPickFromLastMonth - (i + 1));
                    /** @type {?} */
                    var currentDate = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), currentDayOfMonth);
                    currentMonthGrid[0][i] = {
                        isToday: false,
                        isSelected: false,
                        day: currentDayOfMonth,
                        date: currentDate
                    };
                }
            }
            /** @type {?} */
            var fillingDays = 1;
            for (var week = 0; week < this.WEEKS_PER_MONTH; week++) {
                for (var dayOfWeek = 0; dayOfWeek < this.DAYS_PER_WEEK; dayOfWeek++) {
                    if (!!!currentMonthGrid[week][dayOfWeek]) {
                        /** @type {?} */
                        var fillingDates = new Date(this.date.getFullYear(), this.date.getMonth(), fillingDays++);
                        currentMonthGrid[week][dayOfWeek] = {
                            isToday: false,
                            isSelected: false,
                            day: fillingDays,
                            date: fillingDates
                        };
                    }
                }
            }
        }
        return currentMonthGrid;
    };
    /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?} date Date to use.
     * @param {?=} weekStart Day of week which will be considered
     * the beginning of the week.
     * @return {?}
     */
    MonthView.prototype.createGrid = /**
     * Creates the grid corresponding to the month specified
     * by the date.
     * @param {?} date Date to use.
     * @param {?=} weekStart Day of week which will be considered
     * the beginning of the week.
     * @return {?}
     */
    function (date, weekStart) {
        if (weekStart === void 0) { weekStart = DayOfWeek.Monday; }
        /** @type {?} */
        var grid = this.initGrid();
        /** @type {?} */
        var firstDayOfWeek = DateMath.getFirstDayOfMonth(date).getDay() - weekStart.valueOf();
        /** @type {?} */
        var lastDay = DateMath.getLastDayOfMonth(date).getDate();
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var dayOfWeek = firstDayOfWeek;
        /** @type {?} */
        var currentDayOfMonth = 1;
        for (var week = 0; week < this.WEEKS_PER_MONTH; week++) {
            for (; dayOfWeek < this.DAYS_PER_WEEK && currentDayOfMonth <= lastDay; dayOfWeek++) {
                /** @type {?} */
                var todaySameYear = today.getFullYear() === this.date.getFullYear();
                /** @type {?} */
                var todaySameMonth = today.getMonth() === this.date.getMonth();
                /** @type {?} */
                var todaySameDay = today.getDate() === currentDayOfMonth;
                /** @type {?} */
                var currentDate = new Date(this.date.getFullYear(), this.date.getMonth(), currentDayOfMonth);
                grid[week][dayOfWeek] = {
                    isToday: todaySameYear && todaySameMonth && todaySameDay,
                    isSelected: this.date.getDate() === currentDayOfMonth,
                    day: currentDayOfMonth,
                    date: currentDate
                };
                currentDayOfMonth++;
            }
            dayOfWeek = 0;
        }
        return grid;
    };
    /**
     * Initializes the grid that contains
     * the info about the "shape" of the
     * month.
     * @return {?}
     */
    MonthView.prototype.initGrid = /**
     * Initializes the grid that contains
     * the info about the "shape" of the
     * month.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultEmpty = undefined;
        /** @type {?} */
        var grid = [
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty),
            new Array(this.DAYS_PER_WEEK).fill(defaultEmpty)
        ];
        return grid;
    };
    return MonthView;
}());
/**
 * Creates a view of a month.
 */
export { MonthView };
if (false) {
    /** @type {?} */
    MonthView.prototype.WEEKS_PER_MONTH;
    /** @type {?} */
    MonthView.prototype.DAYS_PER_WEEK;
    /** @type {?} */
    MonthView.prototype.date;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW90aC12aWV3LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2ltcGxlLWFuZ3VsYXItY2FsZW5kYXIvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL3ZpZXdzL21vdGgtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQU05Qzs7O0FBQUE7SUFJRTs7O09BR0c7SUFDSCxtQkFBb0IsSUFBVTtRQUFWLFNBQUksR0FBSixJQUFJLENBQU07K0JBUE8sQ0FBQzs2QkFDSCxDQUFDO0tBTUY7SUFFbEM7Ozs7Ozs7O09BUUc7Ozs7Ozs7Ozs7O0lBQ0gsOEJBQVU7Ozs7Ozs7Ozs7SUFBVixVQUFXLGFBQXFCLEVBQUUsU0FBNEI7UUFBbkQsOEJBQUEsRUFBQSxxQkFBcUI7UUFBRSwwQkFBQSxFQUFBLFlBQVksU0FBUyxDQUFDLE1BQU07O1FBQzVELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRS9ELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7O1lBQ2xCLElBQU0sNEJBQTRCLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFL0QsRUFBRSxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDOztnQkFDakMsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDOztnQkFDekQsSUFBTSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O2dCQUUzRSxJQUFNLHNCQUFzQixHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O2dCQUN0RSxJQUFNLHVCQUF1QixHQUFHLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFFdEYsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyx1QkFBdUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDOztvQkFDakQsSUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsR0FBRyxDQUFDLHVCQUF1QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O29CQUNuRixJQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUM7b0JBRS9GLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHO3dCQUN2QixPQUFPLEVBQUUsS0FBSzt3QkFDZCxVQUFVLEVBQUUsS0FBSzt3QkFDakIsR0FBRyxFQUFFLGlCQUFpQjt3QkFDdEIsSUFBSSxFQUFFLFdBQVc7cUJBQ2xCLENBQUM7aUJBQ0g7YUFDRjs7WUFFRCxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFDcEIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7Z0JBQ3ZELEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO29CQUNwRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7O3dCQUV6QyxJQUFNLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQzt3QkFFNUYsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUc7NEJBQ2xDLE9BQU8sRUFBRSxLQUFLOzRCQUNkLFVBQVUsRUFBRSxLQUFLOzRCQUNqQixHQUFHLEVBQUUsV0FBVzs0QkFDaEIsSUFBSSxFQUFFLFlBQVk7eUJBQ25CLENBQUM7cUJBQ0g7aUJBQ0Y7YUFDRjtTQUNGO1FBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDO0tBQ3pCOzs7Ozs7Ozs7SUFTTyw4QkFBVTs7Ozs7Ozs7Y0FBQyxJQUFVLEVBQUUsU0FBNEI7UUFBNUIsMEJBQUEsRUFBQSxZQUFZLFNBQVMsQ0FBQyxNQUFNOztRQUN6RCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7O1FBQzdCLElBQU0sY0FBYyxHQUNsQixRQUFRLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDOztRQUNuRSxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O1FBRTNELElBQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7O1FBQ3pCLElBQUksU0FBUyxHQUFHLGNBQWMsQ0FBQzs7UUFDL0IsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7WUFFdkQsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsSUFBSSxpQkFBaUIsSUFBSSxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQzs7Z0JBQ25GLElBQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDOztnQkFDdEUsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7O2dCQUNqRSxJQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssaUJBQWlCLENBQUM7O2dCQUMzRCxJQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztnQkFFL0YsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHO29CQUN0QixPQUFPLEVBQUUsYUFBYSxJQUFJLGNBQWMsSUFBSSxZQUFZO29CQUN4RCxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxpQkFBaUI7b0JBQ3JELEdBQUcsRUFBRSxpQkFBaUI7b0JBQ3RCLElBQUksRUFBRSxXQUFXO2lCQUNsQixDQUFDO2dCQUVGLGlCQUFpQixFQUFFLENBQUM7YUFDckI7WUFFRCxTQUFTLEdBQUcsQ0FBQyxDQUFDO1NBRWY7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDOzs7Ozs7OztJQVFOLDRCQUFROzs7Ozs7OztRQUNkLElBQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQzs7UUFDL0IsSUFBTSxJQUFJLEdBQUc7WUFDWCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNoRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNoRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNoRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNoRCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUNqRCxDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FBQzs7b0JBakloQjtJQW1JQyxDQUFBOzs7O0FBNUhELHFCQTRIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERheU9mV2VlayB9IGZyb20gJy4uL2RheS1vZi13ZWVrJztcbmltcG9ydCB7IERhdGVNYXRoIH0gZnJvbSAnLi4vZGF0ZXMvZGF0ZS1tYXRoJztcbmltcG9ydCB7IERheUluZm8gfSBmcm9tICcuLi9kYXktaW5mbyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZpZXcgb2YgYSBtb250aC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vbnRoVmlldyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBXRUVLU19QRVJfTU9OVEggPSA1O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgREFZU19QRVJfV0VFSyA9IDc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgTW9udGhWaWV3LlxuICAgKiBAcGFyYW0gZGF0ZSBEYXRlIG9mIHRoZSBtb250aC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZTogRGF0ZSkge31cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZ3JpZCBjb3JyZXNwb25kaW5nIHRvIHRoZSBtb250aCBzcGVjaWZpZWRcbiAgICogYnkgdGhlIGRhdGUuXG4gICAqIEBwYXJhbSBjb21wbGV0ZUhvbGVzIEluZGljYXRlcyBpZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmRcbiAgICogb2YgdGhlIGdyaWQgc2hvdWxkIGJlIGNvbXBsZXRlZCB3aXRoIHRoZSBkYXlzIG9mIHRoZVxuICAgKiBhZGphY2VudCBtb250aHMuXG4gICAqIEBwYXJhbSB3ZWVrU3RhcnQgRGF5IG9mIHdlZWsgdG8gYmUgY29uc2lkZXJlZCB0aGUgYmVnaW5uaW5nXG4gICAqIG9mIHRoZSB3ZWVrLlxuICAgKi9cbiAgY3JlYXRlVmlldyhjb21wbGV0ZUhvbGVzID0gZmFsc2UsIHdlZWtTdGFydCA9IERheU9mV2Vlay5Nb25kYXkpOiBBcnJheTxBcnJheTxEYXlJbmZvPj4ge1xuICAgIGNvbnN0IGN1cnJlbnRNb250aEdyaWQgPSB0aGlzLmNyZWF0ZUdyaWQodGhpcy5kYXRlLCB3ZWVrU3RhcnQpO1xuXG4gICAgaWYgKGNvbXBsZXRlSG9sZXMpIHtcbiAgICAgIGNvbnN0IG5lZWRzVG9CZUZpbGxlZEZyb21CZWdpbm5pbmcgPSAhISFjdXJyZW50TW9udGhHcmlkWzBdWzBdO1xuXG4gICAgICBpZiAobmVlZHNUb0JlRmlsbGVkRnJvbUJlZ2lubmluZykge1xuICAgICAgICBjb25zdCBsYXN0TW9udGggPSBEYXRlTWF0aC5zdWJzdHJhY3RNb250aHModGhpcy5kYXRlLCAxKTtcbiAgICAgICAgY29uc3QgbGFzdERheU9mTGFzdE1vbnRoID0gRGF0ZU1hdGguZ2V0TGFzdERheU9mTW9udGgobGFzdE1vbnRoKS5nZXREYXRlKCk7XG5cbiAgICAgICAgY29uc3QgZmlyc3REYXlPZkN1cnJlbnRNb250aCA9IERhdGVNYXRoLmdldEZpcnN0RGF5T2ZNb250aCh0aGlzLmRhdGUpO1xuICAgICAgICBjb25zdCBkYXlzVG9QaWNrRnJvbUxhc3RNb250aCA9IGZpcnN0RGF5T2ZDdXJyZW50TW9udGguZ2V0RGF5KCkgLSB3ZWVrU3RhcnQudmFsdWVPZigpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5c1RvUGlja0Zyb21MYXN0TW9udGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnREYXlPZk1vbnRoID0gbGFzdERheU9mTGFzdE1vbnRoIC0gKGRheXNUb1BpY2tGcm9tTGFzdE1vbnRoIC0gKGkgKyAxKSk7XG4gICAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZShsYXN0TW9udGguZ2V0RnVsbFllYXIoKSwgbGFzdE1vbnRoLmdldE1vbnRoKCksIGN1cnJlbnREYXlPZk1vbnRoKTtcblxuICAgICAgICAgIGN1cnJlbnRNb250aEdyaWRbMF1baV0gPSB7XG4gICAgICAgICAgICBpc1RvZGF5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGF5OiBjdXJyZW50RGF5T2ZNb250aCxcbiAgICAgICAgICAgIGRhdGU6IGN1cnJlbnREYXRlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgZmlsbGluZ0RheXMgPSAxO1xuICAgICAgZm9yIChsZXQgd2VlayA9IDA7IHdlZWsgPCB0aGlzLldFRUtTX1BFUl9NT05USDsgd2VlaysrKSB7XG4gICAgICAgIGZvciAobGV0IGRheU9mV2VlayA9IDA7IGRheU9mV2VlayA8IHRoaXMuREFZU19QRVJfV0VFSzsgZGF5T2ZXZWVrKyspIHtcbiAgICAgICAgICBpZiAoISEhY3VycmVudE1vbnRoR3JpZFt3ZWVrXVtkYXlPZldlZWtdKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbGxpbmdEYXRlcyA9IG5ldyBEYXRlKHRoaXMuZGF0ZS5nZXRGdWxsWWVhcigpLCB0aGlzLmRhdGUuZ2V0TW9udGgoKSwgZmlsbGluZ0RheXMrKyk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRNb250aEdyaWRbd2Vla11bZGF5T2ZXZWVrXSA9IHtcbiAgICAgICAgICAgICAgaXNUb2RheTogZmFsc2UsXG4gICAgICAgICAgICAgIGlzU2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICBkYXk6IGZpbGxpbmdEYXlzLFxuICAgICAgICAgICAgICBkYXRlOiBmaWxsaW5nRGF0ZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRNb250aEdyaWQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgZ3JpZCBjb3JyZXNwb25kaW5nIHRvIHRoZSBtb250aCBzcGVjaWZpZWRcbiAgICogYnkgdGhlIGRhdGUuXG4gICAqIEBwYXJhbSBkYXRlIERhdGUgdG8gdXNlLlxuICAgKiBAcGFyYW0gd2Vla1N0YXJ0IERheSBvZiB3ZWVrIHdoaWNoIHdpbGwgYmUgY29uc2lkZXJlZFxuICAgKiB0aGUgYmVnaW5uaW5nIG9mIHRoZSB3ZWVrLlxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVHcmlkKGRhdGU6IERhdGUsIHdlZWtTdGFydCA9IERheU9mV2Vlay5Nb25kYXkpOiBBcnJheTxBcnJheTxEYXlJbmZvPj4ge1xuICAgIGNvbnN0IGdyaWQgPSB0aGlzLmluaXRHcmlkKCk7XG4gICAgY29uc3QgZmlyc3REYXlPZldlZWsgPVxuICAgICAgRGF0ZU1hdGguZ2V0Rmlyc3REYXlPZk1vbnRoKGRhdGUpLmdldERheSgpIC0gd2Vla1N0YXJ0LnZhbHVlT2YoKTtcbiAgICBjb25zdCBsYXN0RGF5ID0gRGF0ZU1hdGguZ2V0TGFzdERheU9mTW9udGgoZGF0ZSkuZ2V0RGF0ZSgpO1xuXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBkYXlPZldlZWsgPSBmaXJzdERheU9mV2VlaztcbiAgICBsZXQgY3VycmVudERheU9mTW9udGggPSAxO1xuICAgIGZvciAobGV0IHdlZWsgPSAwOyB3ZWVrIDwgdGhpcy5XRUVLU19QRVJfTU9OVEg7IHdlZWsrKykge1xuXG4gICAgICBmb3IgKDsgZGF5T2ZXZWVrIDwgdGhpcy5EQVlTX1BFUl9XRUVLICYmIGN1cnJlbnREYXlPZk1vbnRoIDw9IGxhc3REYXk7IGRheU9mV2VlaysrKSB7XG4gICAgICAgIGNvbnN0IHRvZGF5U2FtZVllYXIgPSB0b2RheS5nZXRGdWxsWWVhcigpID09PSB0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgY29uc3QgdG9kYXlTYW1lTW9udGggPSB0b2RheS5nZXRNb250aCgpID09PSB0aGlzLmRhdGUuZ2V0TW9udGgoKTtcbiAgICAgICAgY29uc3QgdG9kYXlTYW1lRGF5ID0gdG9kYXkuZ2V0RGF0ZSgpID09PSBjdXJyZW50RGF5T2ZNb250aDtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUuZ2V0RnVsbFllYXIoKSwgdGhpcy5kYXRlLmdldE1vbnRoKCksIGN1cnJlbnREYXlPZk1vbnRoKTtcblxuICAgICAgICBncmlkW3dlZWtdW2RheU9mV2Vla10gPSB7XG4gICAgICAgICAgaXNUb2RheTogdG9kYXlTYW1lWWVhciAmJiB0b2RheVNhbWVNb250aCAmJiB0b2RheVNhbWVEYXksXG4gICAgICAgICAgaXNTZWxlY3RlZDogdGhpcy5kYXRlLmdldERhdGUoKSA9PT0gY3VycmVudERheU9mTW9udGgsXG4gICAgICAgICAgZGF5OiBjdXJyZW50RGF5T2ZNb250aCxcbiAgICAgICAgICBkYXRlOiBjdXJyZW50RGF0ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGN1cnJlbnREYXlPZk1vbnRoKys7XG4gICAgICB9XG5cbiAgICAgIGRheU9mV2VlayA9IDA7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgZ3JpZCB0aGF0IGNvbnRhaW5zXG4gICAqIHRoZSBpbmZvIGFib3V0IHRoZSBcInNoYXBlXCIgb2YgdGhlXG4gICAqIG1vbnRoLlxuICAgKi9cbiAgcHJpdmF0ZSBpbml0R3JpZCgpOiBBcnJheTxBcnJheTxEYXlJbmZvPj4ge1xuICAgIGNvbnN0IGRlZmF1bHRFbXB0eSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBncmlkID0gW1xuICAgICAgbmV3IEFycmF5KHRoaXMuREFZU19QRVJfV0VFSykuZmlsbChkZWZhdWx0RW1wdHkpLFxuICAgICAgbmV3IEFycmF5KHRoaXMuREFZU19QRVJfV0VFSykuZmlsbChkZWZhdWx0RW1wdHkpLFxuICAgICAgbmV3IEFycmF5KHRoaXMuREFZU19QRVJfV0VFSykuZmlsbChkZWZhdWx0RW1wdHkpLFxuICAgICAgbmV3IEFycmF5KHRoaXMuREFZU19QRVJfV0VFSykuZmlsbChkZWZhdWx0RW1wdHkpLFxuICAgICAgbmV3IEFycmF5KHRoaXMuREFZU19QRVJfV0VFSykuZmlsbChkZWZhdWx0RW1wdHkpXG4gICAgXTtcblxuICAgIHJldHVybiBncmlkO1xuICB9XG59XG4iXX0=