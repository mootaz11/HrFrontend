/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DAY_NAMES } from '../day-names';
/**
 * Default formatter for the captions of the days
 * of the week.
 * @param {?} firstDayOfWeek
 * @return {?}
 */
export function defaultDayOfWeekCaptionFormatterFactory(firstDayOfWeek) {
    return function (dayOfWeek) {
        /** @type {?} */
        var formattedDayNames = DAY_NAMES.map(function (dayName) { return formatDayName(dayName); });
        /** @type {?} */
        var reordered = reorderDays(formattedDayNames, firstDayOfWeek);
        return reordered[dayOfWeek.valueOf()];
    };
}
/**
 * Applies formatting to the name of the day.
 * @param {?} dayName Name of the day.
 * @return {?}
 */
function formatDayName(dayName) {
    /** @type {?} */
    var newDayName = dayName.substr(0, 1).toUpperCase() + dayName.substr(1, 1).toLowerCase();
    return newDayName;
}
/**
 * Reorders the array of names so the first index
 * corresponds with the name of the first day of
 * the week.
 * @param {?} dayNames Array with the names of the days
 * of the week.
 * @param {?} firstDayOfWeek First day of the week.
 * @return {?}
 */
function reorderDays(dayNames, firstDayOfWeek) {
    /** @type {?} */
    var dayCount = DAY_NAMES.length;
    /** @type {?} */
    var dayIndex = firstDayOfWeek.valueOf();
    /** @type {?} */
    var reordered = (new Array(dayCount)).fill(0);
    for (var i = 0; i < dayCount; i++) {
        /** @type {?} */
        var newPosition = (i + dayIndex) % dayCount;
        reordered[i] = dayNames[newPosition];
    }
    return reordered;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LW9mLXdlZWstY2FwdGlvbi1mb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaW1wbGUtYW5ndWxhci1jYWxlbmRhci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvZm9ybWF0dGVycy9kYXktb2Ytd2Vlay1jYXB0aW9uLWZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7Ozs7OztBQVF6QyxNQUFNLGtEQUFrRCxjQUF5QjtJQUMvRSxNQUFNLENBQUMsVUFBQyxTQUFvQjs7UUFDMUIsSUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUNyQyxVQUFBLE9BQU8sSUFBSSxPQUFBLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBdEIsQ0FBc0IsQ0FDbEMsQ0FBQzs7UUFFRixJQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDakUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUN2QyxDQUFDO0NBQ0g7Ozs7OztBQU1ELHVCQUF1QixPQUFlOztJQUNwQyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMzRixNQUFNLENBQUMsVUFBVSxDQUFDO0NBQ25COzs7Ozs7Ozs7O0FBVUQscUJBQXFCLFFBQWtCLEVBQUUsY0FBeUI7O0lBQ2hFLElBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7O0lBRWxDLElBQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7SUFDMUMsSUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDOztRQUNsQyxJQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7UUFDOUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUN0QztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUM7Q0FDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEQVlfTkFNRVMgfSBmcm9tICcuLi9kYXktbmFtZXMnO1xuaW1wb3J0IHsgRGF5T2ZXZWVrIH0gZnJvbSAnLi4vZGF5LW9mLXdlZWsnO1xuXG4vKipcbiAqIERlZmF1bHQgZm9ybWF0dGVyIGZvciB0aGUgY2FwdGlvbnMgb2YgdGhlIGRheXNcbiAqIG9mIHRoZSB3ZWVrLlxuICogQHBhcmFtIGRheU9mV2VlayBEYXkgb2YgdGhlIHdlZWsuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0RGF5T2ZXZWVrQ2FwdGlvbkZvcm1hdHRlckZhY3RvcnkoZmlyc3REYXlPZldlZWs6IERheU9mV2Vlayk6IChkYXlPZldlZWs6IERheU9mV2VlaykgPT4gc3RyaW5nIHtcbiAgcmV0dXJuIChkYXlPZldlZWs6IERheU9mV2VlaykgPT4ge1xuICAgIGNvbnN0IGZvcm1hdHRlZERheU5hbWVzID0gREFZX05BTUVTLm1hcChcbiAgICAgIGRheU5hbWUgPT4gZm9ybWF0RGF5TmFtZShkYXlOYW1lKVxuICAgICk7XG5cbiAgICBjb25zdCByZW9yZGVyZWQgPSByZW9yZGVyRGF5cyhmb3JtYXR0ZWREYXlOYW1lcywgZmlyc3REYXlPZldlZWspO1xuICAgIHJldHVybiByZW9yZGVyZWRbZGF5T2ZXZWVrLnZhbHVlT2YoKV07XG4gIH07XG59XG5cbi8qKlxuICogQXBwbGllcyBmb3JtYXR0aW5nIHRvIHRoZSBuYW1lIG9mIHRoZSBkYXkuXG4gKiBAcGFyYW0gZGF5TmFtZSBOYW1lIG9mIHRoZSBkYXkuXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdERheU5hbWUoZGF5TmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbmV3RGF5TmFtZSA9IGRheU5hbWUuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBkYXlOYW1lLnN1YnN0cigxLCAxKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gbmV3RGF5TmFtZTtcbn1cblxuLyoqXG4gKiBSZW9yZGVycyB0aGUgYXJyYXkgb2YgbmFtZXMgc28gdGhlIGZpcnN0IGluZGV4XG4gKiBjb3JyZXNwb25kcyB3aXRoIHRoZSBuYW1lIG9mIHRoZSBmaXJzdCBkYXkgb2ZcbiAqIHRoZSB3ZWVrLlxuICogQHBhcmFtIGRheU5hbWVzIEFycmF5IHdpdGggdGhlIG5hbWVzIG9mIHRoZSBkYXlzXG4gKiBvZiB0aGUgd2Vlay5cbiAqIEBwYXJhbSBmaXJzdERheU9mV2VlayBGaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gKi9cbmZ1bmN0aW9uIHJlb3JkZXJEYXlzKGRheU5hbWVzOiBzdHJpbmdbXSwgZmlyc3REYXlPZldlZWs6IERheU9mV2Vlayk6IHN0cmluZ1tdIHtcbiAgY29uc3QgZGF5Q291bnQgPSBEQVlfTkFNRVMubGVuZ3RoO1xuXG4gIGNvbnN0IGRheUluZGV4ID0gZmlyc3REYXlPZldlZWsudmFsdWVPZigpO1xuICBjb25zdCByZW9yZGVyZWQgPSAobmV3IEFycmF5KGRheUNvdW50KSkuZmlsbCgwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXlDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgbmV3UG9zaXRpb24gPSAoaSArIGRheUluZGV4KSAlIGRheUNvdW50O1xuICAgIHJlb3JkZXJlZFtpXSA9IGRheU5hbWVzW25ld1Bvc2l0aW9uXTtcbiAgfVxuXG4gIHJldHVybiByZW9yZGVyZWQ7XG59XG4iXX0=